[{"C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\index.js":"1","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\App.js":"2","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Login.js":"3","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Signup.js":"4","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\context\\auth\\AuthContext.js":"5","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\context\\auth\\AuthState.js":"6","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\axios\\AuthApi.js":"7","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\utils\\setAuthToken.js":"8","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\context\\types.js":"9","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\context\\auth\\AuthReducer.js":"10","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\axios\\GeneralApi.js":"11","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Community.js":"12","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Header.js":"13","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\utils\\theme.js":"14","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\ColorModeSwitch.js":"15","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Profile.js":"16","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\context\\app\\AppState.js":"17","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\context\\app\\AppContext.js":"18","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\context\\app\\AppReducer.js":"19","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\AddProfile.js":"20","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Recommandations.js":"21","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Recommandation.js":"22","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Questions.js":"23","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Question.js":"24","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Meetings.js":"25","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\HomePage.js":"26"},{"size":327,"mtime":1611460208516,"results":"27","hashOfConfig":"28"},{"size":1844,"mtime":1612869746656,"results":"29","hashOfConfig":"28"},{"size":2533,"mtime":1612646805067,"results":"30","hashOfConfig":"28"},{"size":2941,"mtime":1612185083123,"results":"31","hashOfConfig":"28"},{"size":105,"mtime":1611282743008,"results":"32","hashOfConfig":"28"},{"size":2981,"mtime":1612266162589,"results":"33","hashOfConfig":"28"},{"size":131,"mtime":1611630977037,"results":"34","hashOfConfig":"28"},{"size":275,"mtime":1611283873900,"results":"35","hashOfConfig":"28"},{"size":1303,"mtime":1612865763726,"results":"36","hashOfConfig":"28"},{"size":2061,"mtime":1612265724480,"results":"37","hashOfConfig":"28"},{"size":101,"mtime":1611741012225,"results":"38","hashOfConfig":"28"},{"size":9021,"mtime":1612872228206,"results":"39","hashOfConfig":"28"},{"size":5946,"mtime":1612871813185,"results":"40","hashOfConfig":"28"},{"size":359,"mtime":1611462598743,"results":"41","hashOfConfig":"28"},{"size":452,"mtime":1611460162337,"results":"42","hashOfConfig":"28"},{"size":22987,"mtime":1612872345160,"results":"43","hashOfConfig":"28"},{"size":8367,"mtime":1612865770093,"results":"44","hashOfConfig":"28"},{"size":103,"mtime":1611817859849,"results":"45","hashOfConfig":"28"},{"size":6302,"mtime":1612879163062,"results":"46","hashOfConfig":"28"},{"size":6971,"mtime":1612862890104,"results":"47","hashOfConfig":"28"},{"size":8865,"mtime":1612870835759,"results":"48","hashOfConfig":"28"},{"size":3922,"mtime":1612878610728,"results":"49","hashOfConfig":"28"},{"size":8436,"mtime":1612650187088,"results":"50","hashOfConfig":"28"},{"size":3888,"mtime":1612649553857,"results":"51","hashOfConfig":"28"},{"size":9958,"mtime":1612869876263,"results":"52","hashOfConfig":"28"},{"size":2058,"mtime":1612869726808,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1cvufhj",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"56"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"56"},"C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\index.js",[],["120","121"],"C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\App.js",[],"C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Login.js",["122","123","124"],"import {useState,useContext,useEffect} from 'react'\r\nimport AuthContext from '../context/auth/AuthContext'\r\n\r\nimport {Flex,\r\n    Box,\r\n    Heading,\r\n    FormControl,\r\n    FormLabel,\r\n    Input,\r\n    Button,\r\n    useToast } from \"@chakra-ui/react\"\r\n\r\nconst Login = props => {\r\n\r\n    const authContext = useContext(AuthContext)\r\n    const {login,isAuthenticated,error,user} = authContext\r\n\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n\r\n    const errorToast = useToast()\r\n\r\n    const onChangeUsername = e => {\r\n        setUsername(e.target.value)\r\n    }\r\n\r\n    const onChangePassword = e => {\r\n        setPassword(e.target.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n                if(error !== null){\r\n                    setUsername('')\r\n                    setPassword('')\r\n                }\r\n\r\n                if(isAuthenticated == \"true\"){\r\n                      props.history.push('/community')\r\n                }\r\n               \r\n\r\n        \r\n    }, [error,isAuthenticated]);\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        if(username !== '' && password !== ''){\r\n            const data = {\r\n                username,\r\n                password\r\n            }\r\n            login(data)\r\n        }else{\r\n          errorToast({\r\n            title: 'Empty Fields',\r\n            description: \"Fill all the fields.\",\r\n            status: \"error\",\r\n            duration: 4000,\r\n            isClosable: true,\r\n        })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\r\n        <Box bg=\"brand.100\" p={8} maxWidth=\"500px\" borderWidth={1} borderRadius={8} boxShadow=\"lg\" marginTop={50}>\r\n          <Box textAlign=\"center\">\r\n            <Heading>Login</Heading>\r\n          </Box>\r\n          <Box my={4} textAlign=\"left\">\r\n            <form onSubmit={onSubmit}>\r\n              <FormControl>\r\n                <FormLabel>Username</FormLabel>\r\n                <Input type=\"text\" value={username} placeholder=\"test\" onChange={onChangeUsername} />\r\n              </FormControl>\r\n              <FormControl mt={6}>\r\n                <FormLabel>Password</FormLabel>\r\n                <Input type=\"password\" value={password} placeholder=\"*******\" onChange={onChangePassword} />\r\n              </FormControl>\r\n              <Button width=\"full\" mt={4} type=\"submit\">\r\n                Sign In\r\n              </Button>\r\n            </form>\r\n          </Box>\r\n        </Box>\r\n      </Flex>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Signup.js",["125"],"import {useState,useContext,useEffect} from 'react'\r\nimport AuthContext from '../context/auth/AuthContext'\r\n\r\nimport {Flex,\r\n    Box,\r\n    Heading,\r\n    FormControl,\r\n    FormLabel,\r\n    Input,\r\n    Button,\r\n    useToast } from \"@chakra-ui/react\"\r\n\r\nconst Signup = props => {\r\n\r\n    const authContext = useContext(AuthContext)\r\n    const {signup,isRegistered,error} = authContext\r\n\r\n    const [username, setUsername] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n\r\n    const errorToast = useToast()\r\n\r\n\r\n    const onChangeUsername = e => {\r\n        setUsername(e.target.value)\r\n    }\r\n\r\n    const onChangeEmail = e => {\r\n        setEmail(e.target.value)\r\n    }\r\n\r\n    const onChangePassword = e => {\r\n        setPassword(e.target.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n                if(error !== null){\r\n                    setUsername('')\r\n                    setPassword('')\r\n                }\r\n\r\n                if(isRegistered == true){\r\n                      props.history.push('/login')\r\n                }\r\n               \r\n\r\n        \r\n    }, [error,isRegistered,props.history]);\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        if(username !== '' && password !== '' && email !== ''){\r\n            const data = {\r\n                username,\r\n                email,\r\n                password,\r\n                roles: [\"user\"]\r\n            }\r\n            signup(data)\r\n        }else{\r\n          errorToast({\r\n            title: 'Empty Fields',\r\n            description: \"Fill all the fields.\",\r\n            status: \"error\",\r\n            duration: 4000,\r\n            isClosable: true,\r\n        })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\r\n        <Box bg=\"brand.100\" p={8} maxWidth=\"500px\" borderWidth={1} borderRadius={8} boxShadow=\"lg\" marginTop={50}>\r\n          <Box textAlign=\"center\">\r\n            <Heading>Sign Up</Heading>\r\n          </Box>\r\n          <Box my={4} textAlign=\"left\">\r\n            <form onSubmit={onSubmit}>\r\n              <FormControl>\r\n                <FormLabel>Username</FormLabel>\r\n                <Input type=\"text\" value={username} placeholder=\"test\" onChange={onChangeUsername} />\r\n              </FormControl>\r\n              <FormControl>\r\n                <FormLabel>Email</FormLabel>\r\n                <Input type=\"text\" value={email} placeholder=\"test@mail.com\" onChange={onChangeEmail} />\r\n              </FormControl>\r\n              <FormControl mt={6}>\r\n                <FormLabel>Password</FormLabel>\r\n                <Input type=\"password\" value={password} placeholder=\"*******\" onChange={onChangePassword} />\r\n              </FormControl>\r\n              <Button width=\"full\" mt={4} type=\"submit\">\r\n                Sign Up\r\n              </Button>\r\n            </form>\r\n          </Box>\r\n        </Box>\r\n      </Flex>\r\n    )\r\n}\r\n\r\nexport default Signup\r\n","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\context\\auth\\AuthContext.js",[],"C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\context\\auth\\AuthState.js",["126"],"import React, { useReducer } from 'react';\r\nimport AuthContext from './AuthContext'\r\nimport AuthReducer from './AuthReducer'\r\nimport authApi from '../../axios/AuthApi'\r\nimport generalApi from '../../axios/GeneralApi'\r\nimport setAuthToken from '../../utils/setAuthToken'\r\n\r\nimport {\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    REGISTER_SUCCESS,\r\n    PERSIST_PROFILE,\r\n    REGISTER_FAIL,\r\n    LOGOUT\r\n} from '../types'\r\n\r\nconst AuthState = props => {\r\n\r\n    const initialState = {\r\n        token: localStorage.getItem('token'),\r\n        isAuthenticated: localStorage.getItem('isAuth'),\r\n        isRegistered: false,\r\n        user: JSON.parse(localStorage.getItem('user')) ,\r\n        profile: JSON.parse(localStorage.getItem('profile')),\r\n        error: null\r\n    }\r\n\r\n   const [state, dispatch] = useReducer(AuthReducer, initialState)\r\n\r\n   // Action :\r\n\r\n\r\n   const addProfile = async data => {\r\n    \r\n    setAuthToken(localStorage.token)\r\n    //console.log('Hey update here')\r\n    try{\r\n     \r\n    const res = await generalApi.post('/api/profiles',data)\r\n\r\n    dispatch({\r\n        type: PERSIST_PROFILE,\r\n        payload: res.data\r\n    })\r\n    \r\n\r\n    } catch(err){\r\n        console.log(err.message)\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n   // Login User\r\n   const login = async formData => {\r\n\r\n    try {\r\n        const res = await authApi.post('/api/auth/signin', formData)\r\n\r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: res.data\r\n        })\r\n        setAuthToken(res.data.accessToken)\r\n        loadProfile(res.data.id)\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: LOGIN_FAIL,\r\n            payload: 'Invalid Credentials!'\r\n        })\r\n    }\r\n}\r\n\r\n // Resister User\r\n const signup = async formData => {\r\n\r\n    try {\r\n       const res = await authApi.post('/api/auth/signup', formData)\r\n\r\n        dispatch({\r\n            type: REGISTER_SUCCESS\r\n        })\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: REGISTER_FAIL,\r\n            payload: err.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n// Load User Profile\r\nconst loadProfile = async userId => {\r\n\r\n    try {\r\n       const res = await generalApi.get(`/api/profiles/user/${userId}`)\r\n       console.log('profile data : ',res.data)\r\n\r\n        dispatch({\r\n            type: PERSIST_PROFILE,\r\n            payload: res.data\r\n        })\r\n\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n   // Logout\r\n   const logout = () => {\r\n    dispatch({type: LOGOUT})\r\n    }\r\n\r\n\r\n   return (\r\n       <AuthContext.Provider \r\n       value={{\r\n           token: state.token,\r\n           isAuthenticated: state.isAuthenticated,\r\n           isRegistered: state.isRegistered,\r\n           user: state.user,\r\n           profile : state.profile,\r\n           error: state.error,\r\n           login,\r\n           signup,\r\n           loadProfile,\r\n           addProfile,\r\n           logout\r\n       }}>\r\n\r\n           {props.children}\r\n       </AuthContext.Provider>\r\n   )\r\n\r\n}\r\nexport default AuthState","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\axios\\AuthApi.js",[],"C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\utils\\setAuthToken.js",[],"C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\context\\types.js",[],"C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\context\\auth\\AuthReducer.js",["127"],"import {\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    REGISTER_SUCCESS,\r\n    PERSIST_PROFILE,\r\n    REGISTER_FAIL,\r\n    LOGOUT\r\n} from '../types'\r\n\r\n\r\nexport default (state,action) => {\r\n    switch(action.type){\r\n\r\n        case LOGIN_SUCCESS:\r\n            localStorage.setItem('token',action.payload.accessToken)\r\n            localStorage.setItem('isAuth',\"true\")\r\n            localStorage.setItem('user',JSON.stringify(action.payload) )\r\n            return {\r\n                ...state,\r\n                user: action.payload,\r\n                token: action.payload.accessToken,\r\n                isAuthenticated: \"true\",\r\n                error: null\r\n            }\r\n            case LOGIN_FAIL:\r\n            case REGISTER_FAIL:\r\n            localStorage.removeItem('token')\r\n            localStorage.removeItem('isAuth')\r\n            localStorage.removeItem('user')\r\n            return {\r\n                ...state,\r\n                token:null,\r\n                isAuthenticated: 'false',\r\n                user: null,\r\n                error: action.payload\r\n            }\r\n                case REGISTER_SUCCESS:\r\n                return {\r\n                    ...state,\r\n                    isRegistered: true\r\n                }\r\n                case LOGOUT:\r\n                    localStorage.removeItem('token')\r\n                    localStorage.removeItem('user')\r\n                    localStorage.setItem('isAuth','false')\r\n                    localStorage.removeItem('profile')\r\n                    return {\r\n                        ...state,\r\n                        token:null,\r\n                        isAuthenticated: \"false\",\r\n                        user: null,\r\n                        profile: null,\r\n                        error: action.payload\r\n                    }\r\n            case PERSIST_PROFILE:\r\n                localStorage.setItem('profile',JSON.stringify(action.payload) )\r\n            return {\r\n                ...state,\r\n               profile: action.payload\r\n            }\r\n            \r\n        default:\r\n            return state\r\n    }\r\n}","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\axios\\GeneralApi.js",[],"C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Community.js",["128","129","130","131","132","133","134","135","136","137","138","139","140","141"],"import React,{useState,useEffect,useContext,useRef} from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport { useDisclosure,Box,Avatar,Spacer,Button,IconButton,Text,Badge,Icon,RadioGroup,Stack,Radio,Select,Input,Heading,InputLeftElement,InputGroup, Flex, Center, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, FormControl, FormLabel, ModalFooter, Modal } from \"@chakra-ui/react\"\r\nimport { MdMyLocation, MdPermContactCalendar,MdSearch} from 'react-icons/md'\r\nimport moment from 'moment'\r\nimport AppContext from '../context/app/AppContext'\r\nimport AuthContext from '../context/auth/AuthContext'\r\n\r\nconst Community = props => {\r\n\r\n\r\n  const { match: { params } } = props \r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const history = useHistory()\r\n    \r\n    const appContext = useContext(AppContext)\r\n    const {communityProfiles,filteredCommunityProfiles,getProfiles,requestMeeting,\r\n      filterProByLocation,clearFilterPro\r\n    } = appContext\r\n\r\n    const authContext = useContext(AuthContext)\r\n    const {user} = authContext\r\n\r\n    const [modalSubject, setModalSubject] = useState({})\r\n    const [message, setMessage] = useState('')\r\n    const [time, setTime] = useState('')\r\n\r\n    //Filters :\r\n\r\n    const textLoc = useRef('')\r\n\r\n    const onChangeLoc = e => {\r\n      if(textLoc.current.value !== ''){\r\n          filterProByLocation(e.target.value)\r\n      }\r\n      else{\r\n          clearFilterPro()\r\n      }\r\n  }\r\n  \r\n\r\n    const goToProfile = (id) => {\r\n      history.push(`/profile/${id}`)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getProfiles().then(_ => {\r\n          console.log('here: ',params.chosenCity)\r\n          if(params.chosenCity){\r\n            console.log('#####here undef')\r\n            textLoc.current = params.chosenCity\r\n            filterProByLocation(params.chosenCity)\r\n          }\r\n        })\r\n    }, [])\r\n\r\n    const handleRequestMeeting = e => {\r\n        e.preventDefault()\r\n        if(message !== ''){\r\n          const reg = /^(0?[1-9]|[12][0-9]|3[01])[\\/\\-](0?[1-9]|1[012])[\\/\\-]\\d{4}$/;\r\n\r\n          if(!time.match(reg)){\r\n            alert('wrong date format !')\r\n            return;\r\n          }\r\n            let data = {\r\n                location: modalSubject.city,\r\n                message: message,\r\n                time: time,\r\n                statut : \"pending\"\r\n            }\r\n            requestMeeting(modalSubject.user,data)\r\n            .then(_ => {\r\n              history.push(`/meetings`)\r\n            })\r\n        }else alert('you must enter a meesage !')\r\n    }\r\n    \r\n    return (\r\n        <>\r\n      \r\n        <Box textAlign=\"center\">\r\n            <Heading>Search For Locals</Heading>\r\n          </Box>\r\n          <br />\r\n         <Center>\r\n          <Flex gridColumnGap={4} gridRowGap={4}\r\n          justify={[\"center\", \"space-between\", \"flex-end\", \"flex-end\"]}\r\n          direction={[\"column\", \"row\", \"row\", \"row\"]}\r\n          pt={[4, 4, 0, 0]} spacing={3}>\r\n                <InputGroup>\r\n                    <InputLeftElement\r\n                    pointerEvents=\"none\"\r\n                    children={<Icon color=\"gray.300\" as={MdMyLocation} />}\r\n                    />\r\n                    <Input type=\"text\" placeholder=\"Location\" ref={textLoc} onChange={onChangeLoc} />\r\n                </InputGroup>\r\n\r\n            </Flex>\r\n            </Center>\r\n           <form> <Modal\r\n        isOpen={isOpen}\r\n        onClose={onClose}\r\n      >\r\n        <ModalOverlay />\r\n        \r\n        <ModalContent>\r\n          <ModalHeader>Contact {modalSubject.name} !</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody pb={6}>\r\n            <FormControl>\r\n              <FormLabel>Message</FormLabel>\r\n              <Input value={message}  placeholder=\"Send a message!\" onChange={e => setMessage(e.target.value)} />\r\n              <FormLabel>Time</FormLabel>\r\n              <Input value={time}  placeholder=\"Time of your meeting ! format : (DD-MM-YYY)\" onChange={e => setTime(e.target.value)} />\r\n            </FormControl>\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button type=\"submit\" onClick={handleRequestMeeting} colorScheme=\"blue\" mr={3}>\r\n              Send!\r\n            </Button>\r\n            <Button onClick={onClose}>Cancel</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal></form>\r\n\r\n<br />\r\n\r\n\r\n\r\n{communityProfiles !== null ? (\r\n            <>\r\n          {filteredCommunityProfiles !== null\r\n            ? filteredCommunityProfiles.map(profile => (\r\n\r\n              profile.user !== user.id &&  <Flex marginLeft=\"80\" marginBottom='5' alignItems=\"center\" maxW=\"4xl\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\" boxShadow=\"lg\">\r\n\r\n              <Box p=\"4\">\r\n              <Avatar\r\n        size=\"xl\"\r\n        name=\"Kola Tioluwani\"\r\n        src={profile.profilePicture}\r\n      />  \r\n              </Box>\r\n        <Box p=\"6\">\r\n          <Box d=\"flex\" alignItems=\"baseline\">\r\n            <Badge borderRadius=\"full\" px=\"2\" colorScheme={profile.sexe === 'Male' ? 'teal' : 'red'}>\r\n              {profile.sexe}\r\n            </Badge>\r\n          </Box>\r\n          <Box\r\n           \r\n          >\r\n            Fullname : {profile.fullName}\r\n          </Box>\r\n          <Box\r\n           \r\n          >\r\n            City : {profile.city}\r\n          </Box>\r\n  \r\n          <Box\r\n          >\r\n            Age : {moment.duration(moment().diff(moment(profile.birthDate,'DD-MM-YYYY'))).years()  }\r\n          </Box>\r\n  \r\n          <Box\r\n              color=\"gray.500\"\r\n              fontWeight=\"semibold\"\r\n              letterSpacing=\"wide\"\r\n              fontSize=\"xs\"\r\n              textTransform=\"uppercase\"\r\n            >\r\n            <Text> Languages: {profile.languages.length !== 0 ? \r\n            profile.languages.map((language,i) => profile.languages.length == i + 1 ? language : language + '\\u2022') : 'Not Specified' }</Text>\r\n            </Box>\r\n        \r\n        </Box>\r\n        <Flex direction=\"column\"\r\n        >\r\n            <Box mt=\"1\"\r\n        fontWeight=\"semibold\"\r\n        as=\"h4\"\r\n        lineHeight=\"tight\"\r\n        isTruncated>\r\n          Bio: \r\n            </Box>\r\n            <Box overflow=\"hidden\">\r\n                {profile.description}\r\n            </Box>\r\n        </Flex>\r\n        <Spacer />\r\n        <Flex direction=\"column\" alignItems=\"center\" paddingRight=\"2\">\r\n        <Button onClick={() => goToProfile(profile.user)} colorScheme=\"blue\">See profile</Button>\r\n        <br />\r\n        <Button onClick={() => {\r\n          setModalSubject(profile)\r\n          onOpen()\r\n        } } colorScheme=\"blue\">Contact</Button>\r\n        </Flex>\r\n      </Flex>\r\n                \r\n              ))\r\n            : communityProfiles.map(profile => (\r\n                \r\n          profile.user !== user.id &&    <Flex marginLeft=\"80\" marginBottom='5' alignItems=\"center\" maxW=\"4xl\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\" boxShadow=\"lg\">\r\n\r\n              <Box p=\"4\">\r\n              <Avatar\r\n        size=\"xl\"\r\n        name=\"Kola Tioluwani\"\r\n        src={profile.profilePicture}\r\n      />  \r\n              </Box>\r\n        <Box p=\"6\">\r\n          <Box d=\"flex\" alignItems=\"baseline\">\r\n            <Badge borderRadius=\"full\" px=\"2\" colorScheme={profile.sexe === 'Male' ? 'teal' : 'red'}>\r\n              {profile.sexe}\r\n            </Badge>\r\n          </Box>\r\n          <Box\r\n           \r\n          >\r\n            Fullname : {profile.fullName}\r\n          </Box>\r\n          <Box\r\n           \r\n          >\r\n            City : {profile.city}\r\n          </Box>\r\n  \r\n          <Box\r\n          >\r\n            Age : {moment.duration(moment().diff(moment(profile.birthDate,'DD-MM-YYYY'))).years()  }\r\n          </Box>\r\n  \r\n          <Box\r\n              color=\"gray.500\"\r\n              fontWeight=\"semibold\"\r\n              letterSpacing=\"wide\"\r\n              fontSize=\"xs\"\r\n              textTransform=\"uppercase\"\r\n            >\r\n            <Text> Languages: {profile.languages.length !== 0 ? \r\n            profile.languages.map((language,i) => profile.languages.length == i + 1 ? language : language + '\\u2022') : 'Not Specified' }</Text>\r\n            </Box>\r\n        \r\n        </Box>\r\n        <Flex direction=\"column\"\r\n        >\r\n            <Box mt=\"1\"\r\n        fontWeight=\"semibold\"\r\n        as=\"h4\"\r\n        lineHeight=\"tight\"\r\n        isTruncated>\r\n          Bio: \r\n            </Box>\r\n            <Box overflow=\"hidden\">\r\n                {profile.description}\r\n            </Box>\r\n        </Flex>\r\n        <Spacer />\r\n        <Flex direction=\"column\" alignItems=\"center\" paddingRight=\"2\">\r\n        <Button onClick={() => goToProfile(profile.user)} colorScheme=\"blue\">See profile</Button>\r\n        <br />\r\n        <Button onClick={() => {\r\n          setModalSubject(profile)\r\n          onOpen()\r\n        } } colorScheme=\"blue\">Contact</Button>\r\n        </Flex>\r\n      </Flex>\r\n                \r\n              ))} \r\n              \r\n              </>\r\n       \r\n      ):<p>loading...</p>}\r\n\r\n\r\n          </>  \r\n        \r\n    )\r\n}\r\n\r\nexport default Community\r\n","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Header.js",["142","143","144"],"import React,{useContext} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Box, Flex, Text, Button, Avatar, AvatarBadge, IconButton, Icon,Image } from \"@chakra-ui/react\";\r\nimport ColorModeSwitch from './ColorModeSwitch'\r\nimport AuthContext from '../context/auth/AuthContext'\r\nimport { MdFlightLand, MdFlightTakeoff, MdPowerSettingsNew } from \"react-icons/md\";\r\nimport {useHistory} from 'react-router-dom'\r\n\r\n\r\n\r\nconst MenuItem = ({ children, isLast, to = \"/\", ...rest }) => {\r\n\r\n  return (\r\n    <Text\r\n      mb={{ base: isLast ? 0 : 8, sm: 0 }}\r\n      mr={{ base: 0, sm: isLast ? 0 : 8 }}\r\n      display=\"block\"\r\n      {...rest}\r\n    >\r\n      <Link to={to}>{children}</Link>\r\n    </Text>\r\n  );\r\n};\r\n\r\nconst CloseIcon = () => (\r\n  <svg width=\"24\" viewBox=\"0 0 18 18\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <title>Close</title>\r\n    <path\r\n      fill=\"white\"\r\n      d=\"M9.00023 7.58599L13.9502 2.63599L15.3642 4.04999L10.4142 8.99999L15.3642 13.95L13.9502 15.364L9.00023 10.414L4.05023 15.364L2.63623 13.95L7.58623 8.99999L2.63623 4.04999L4.05023 2.63599L9.00023 7.58599Z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nconst MenuIcon = () => (\r\n  <svg\r\n    width=\"24px\"\r\n    viewBox=\"0 0 20 20\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    fill=\"white\"\r\n  >\r\n    <title>Menu</title>\r\n    <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\r\n  </svg>\r\n);\r\n\r\nconst Header = (props) => {\r\n  const [show, setShow] = React.useState(false);\r\n  const toggleMenu = () => setShow(!show);\r\n\r\n  const history = useHistory()\r\n\r\n  const authContext = useContext(AuthContext)\r\n  const {profile,isAuthenticated, logout,user} = authContext \r\n\r\n  const onLogout = () => {\r\n    logout()\r\n     history.push('/login')\r\n  }\r\n  const goToProfile = (id) => {\r\n    history.push(`/profile/${id}`)\r\n  }\r\n  const goToAddProfile = () => {\r\n    history.push(`/profile/add`)\r\n  }\r\n  \r\n\r\n  const authLinks = (\r\n    <>\r\n    { profile !== null && <>\r\n    <Flex cursor=\"pointer\" onClick={() => goToProfile(profile.user)} marginRight='7px'>\r\n  <Avatar src={profile.profilePicture} />\r\n  <Box ml=\"3\">\r\n    <Text color=\"white\" fontWeight=\"bold\">\r\n      {profile.fullName}\r\n    </Text>\r\n    <Text fontSize=\"sm\" color=\"white\">{profile.city}</Text>\r\n  </Box>\r\n</Flex>\r\n<Button marginRight='6px' onClick={onLogout}>\r\n  <Icon color=\"#C62828\" w={8} h={8} as={MdPowerSettingsNew} />\r\n</Button>\r\n</>\r\n}\r\n    </>\r\n  )\r\n  const guestLinks = (\r\n    \r\n    <>\r\n    {user !== null ? <> <Button\r\n              size=\"sm\"\r\n              rounded=\"md\"\r\n              color={[\"primary.500\", \"primary.500\", \"white\", \"white\"]}\r\n              bg={[\"white\", \"white\", \"primary.500\", \"primary.500\"]}\r\n              _hover={{\r\n                bg: [\"primary.100\", \"primary.100\", \"primary.600\", \"primary.600\"]\r\n              }}\r\n              marginRight='18px'\r\n              onClick={() => goToAddProfile(user.id)}\r\n            >\r\n              Add Profile\r\n            </Button> \r\n            <Button marginRight='6px' onClick={onLogout}>\r\n              <Icon color=\"#C62828\" w={8} h={8} as={MdPowerSettingsNew} />\r\n            </Button>\r\n            </> :\r\n          \r\n          <>\r\n    <MenuItem to=\"/login\" isLast={false}>\r\n            <Button\r\n              size=\"sm\"\r\n              rounded=\"md\"\r\n              color={[\"primary.500\", \"primary.500\", \"white\", \"white\"]}\r\n              bg={[\"white\", \"white\", \"primary.500\", \"primary.500\"]}\r\n              _hover={{\r\n                bg: [\"primary.100\", \"primary.100\", \"primary.600\", \"primary.600\"]\r\n              }}\r\n            >\r\n              Login\r\n            </Button>\r\n          </MenuItem>\r\n          <MenuItem to=\"/signup\" isLast={false}>\r\n            <Button\r\n              size=\"sm\"\r\n              rounded=\"md\"\r\n              color={[\"primary.500\", \"primary.500\", \"white\", \"white\"]}\r\n              bg={[\"white\", \"white\", \"primary.500\", \"primary.500\"]}\r\n              _hover={{\r\n                bg: [\"primary.100\", \"primary.100\", \"primary.600\", \"primary.600\"]\r\n              }}\r\n            >\r\n              Create Account\r\n            </Button>\r\n          </MenuItem>\r\n          </>\r\n          \r\n          \r\n          }\r\n    \r\n    </>\r\n  )\r\n\r\n\r\n  return (\r\n    <Flex\r\n      as=\"nav\"\r\n      align=\"center\"\r\n      justify=\"space-between\"\r\n      wrap=\"wrap\"\r\n      w=\"100%\"\r\n      mb={8}\r\n      p={8}\r\n      bg={[\"primary.800\", \"primary.800\", \"primary.800\", \"primary.800\"]}\r\n      color={[\"white\", \"white\", \"primary.700\", \"primary.700\"]}\r\n      {...props}\r\n    >\r\n\r\n    <Flex align=\"center\">\r\n    <MdFlightTakeoff />\r\n    \r\n    <Box w=\"130px\" ml='1' cursor='pointer' onClick={() => history.push('/') }\r\n          color={[\"white\", \"white\", \"primary.500\", \"primary.500\"]}>\r\n      <Text fontSize=\"lg\" fontWeight=\"bold\">\r\n        World Traveler\r\n      </Text>\r\n     \r\n\r\n    </Box><MdFlightLand />\r\n   {/* <Image boxSize=\"50px\" src=\"https://res.cloudinary.com/oelmounkad/image/upload/v1612190965/headerpic_tmzbtw.png\" alt=\"naruto\" objectFit=\"cover\" />*/}\r\n      </Flex>\r\n\r\n      <Box display={{ base: \"block\", md: \"none\" }} onClick={toggleMenu}>\r\n        {show ? <CloseIcon /> : <MenuIcon />}\r\n      </Box>\r\n\r\n      \r\n    \r\n\r\n      <Box\r\n        display={{ base: show ? \"block\" : \"none\", md: \"block\" }}\r\n        flexBasis={{ base: \"100%\", md: \"auto\" }}\r\n      >\r\n\r\n        <Flex\r\n          align=\"center\"\r\n          justify={[\"center\", \"space-between\", \"flex-end\", \"flex-end\"]}\r\n          direction={[\"column\", \"row\", \"row\", \"row\"]}\r\n          pt={[4, 4, 0, 0]}\r\n        >\r\n          <MenuItem to=\"/\">Home</MenuItem>\r\n          <MenuItem to=\"/community\">Community </MenuItem>\r\n          <MenuItem to=\"/meetings\">Meetings </MenuItem>\r\n          <MenuItem to=\"/recommandations\">Recommandations </MenuItem>\r\n          <MenuItem to=\"/questions\">Q&A </MenuItem>\r\n          { isAuthenticated === \"true\" && profile !== null ? authLinks : guestLinks}\r\n          <ColorModeSwitch />\r\n        </Flex>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\utils\\theme.js",[],"C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\ColorModeSwitch.js",[],"C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Profile.js",["145","146","147","148","149","150","151","152","153","154","155","156"],"import React,{useEffect,useContext,useState} from 'react'\r\nimport {AddIcon, EditIcon} from \"@chakra-ui/icons\"\r\nimport {Box ,Input,Flex,Modal,ModalOverlay,ModalContent,Spinner,ModalCloseButton,ModalBody,ModalFooter, useDisclosure ,Text,Image, Icon, Spacer, Button, Heading, Textarea, Select, IconButton, Center} from \"@chakra-ui/react\"\r\nimport {MdEdit,MdPermContactCalendar,MdPersonAdd,MdChat, MdFavorite, MdGroupWork, MdLanguage, MdFitnessCenter, MdSave, MdKeyboardReturn} from 'react-icons/md'\r\nimport AppContext from '../context/app/AppContext'\r\nimport AuthContext from '../context/auth/AuthContext'\r\nimport moment from 'moment'\r\n\r\nconst Profile = props => {\r\n\r\n    \r\n    let hiddenInput = null\r\n    let hiddenInput2 = null\r\n    const { match: { params } } = props \r\n\r\n    const appContext = useContext(AppContext)\r\n    const {getChosenProfile,chosenProfile,updateProfile,addPhotoToPortfolio,editProfilePhoto} = appContext\r\n\r\n    const authContext = useContext(AuthContext)\r\n    const {user} = authContext\r\n\r\n    const [modalImage, setModalImage] = useState('')\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [editedProfile,setEditedProfile] = useState({})\r\n    const [editedBirthday, setEditedBirthday] = useState({\r\n        day:'',month:'',year:''\r\n    })\r\n\r\n    useEffect(() => {\r\n        getChosenProfile(params.id)\r\n    }, [])\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n        if(chosenProfile !== null){\r\n            setEditedProfile({...editedProfile,\r\n                ...chosenProfile\r\n        })\r\n        let day = moment(chosenProfile.birthDate,'DD-MM-YYYY').date()\r\n        let month = moment(chosenProfile.birthDate,'DD-MM-YYYY').month()+1\r\n        let year = moment(chosenProfile.birthDate,'DD-MM-YYYY').year()\r\n        setEditedBirthday({...editedBirthday, day,month,year })\r\n\r\n        }\r\n    }, [chosenProfile])\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const handleOpen = image => {\r\n        setModalImage(image)\r\n        onOpen()\r\n    }\r\n\r\n    const onChangeEdited = e => {\r\n        setEditedProfile({...editedProfile,\r\n                    [e.target.name]:e.target.value\r\n            })\r\n    }\r\n\r\n    const onChangeSelectLanguage = e => {\r\n        if(!editedProfile.languages.includes(e.target.value)){\r\n            setEditedProfile({...editedProfile,\r\n                    [e.target.name]:[...editedProfile.languages,e.target.value]\r\n            })\r\n        }else{\r\n            setEditedProfile({...editedProfile,\r\n                [e.target.name]:editedProfile.languages.filter(lang => lang !== e.target.value)\r\n        })\r\n        }\r\n        \r\n    }\r\n\r\n    const onChangeSelectHobby = e => {\r\n        if(!editedProfile.hobbies.includes(e.target.value)){\r\n            setEditedProfile({...editedProfile,\r\n                    [e.target.name]:[...editedProfile.hobbies,e.target.value]\r\n            })\r\n        }else{\r\n            setEditedProfile({...editedProfile,\r\n                [e.target.name]:editedProfile.hobbies.filter(hob => hob !== e.target.value)\r\n        })\r\n        }\r\n        \r\n    }\r\n\r\n    const onChangeEditedBirthday = e => {\r\n        setEditedBirthday({...editedBirthday,\r\n                [e.target.name]:e.target.value\r\n        })\r\n    }\r\n    \r\n    const [fileInputState, setFileInputState] = useState('')\r\n    const [fileInputState2, setFileInputState2] = useState('')\r\n    const [previewSource, setPreviewSource] = useState('');\r\n    const [previewSource2, setPreviewSource2] = useState('');\r\n    const [selectedFile, setSelectedFile] = useState();\r\n    const [selectedFile2, setSelectedFile2] = useState();\r\n\r\n    const handleFileInputChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if(file instanceof Blob){\r\n            previewFile(file);\r\n        setSelectedFile(file);\r\n        setFileInputState(e.target.value);\r\n        }else{\r\n            setPreviewSource('');\r\n            setFileInputState('');\r\n        }\r\n        \r\n    }\r\n                        const handleFileInputChange2 = (e) => {\r\n                            const file = e.target.files[0];\r\n                            if(file instanceof Blob){\r\n                            previewFile2(file);\r\n                            setSelectedFile2(file);\r\n                            setFileInputState2(e.target.value);\r\n                            }else{\r\n                                setPreviewSource2('');\r\n                                setFileInputState2('');\r\n                            }\r\n                            \r\n                        }\r\n                        const handleSetProfilePhoto = () => {\r\n                            if (!selectedFile2) return;\r\n                            const reader = new FileReader();\r\n                            reader.readAsDataURL(selectedFile2);\r\n                            reader.onloadend = () => {\r\n                                let data = {profilePicture:reader.result}\r\n                                console.log('data : ',data)\r\n                                editProfilePhoto(data,chosenProfile._id)\r\n                                \r\n                                setFileInputState2('')\r\n                                setPreviewSource2('')\r\n                                \r\n                            }\r\n                        }\r\n\r\n    const previewFile = (file) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onloadend = () => {\r\n            setPreviewSource(reader.result);\r\n        };\r\n    };\r\n\r\n    const previewFile2 = (file) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onloadend = () => {\r\n            setPreviewSource2(reader.result);\r\n        };\r\n    };\r\n\r\n    const addPhotoToPortfolioLocal = () => {\r\n        if (!selectedFile) return;\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(selectedFile);\r\n        reader.onloadend = () => {\r\n            let data = {portfolio:reader.result}\r\n            addPhotoToPortfolio(data,chosenProfile._id)\r\n            setFileInputState('')\r\n            setPreviewSource('')\r\n        }\r\n        \r\n        \r\n\r\n    }\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        let birthDate = editedBirthday.day+\"-\"+editedBirthday.month+\"-\"+editedBirthday.year\r\n        editedProfile.birthDate = birthDate\r\n        updateProfile(editedProfile)\r\n        setEditMode(false)\r\n    }\r\n\r\n    const [showAddingButton, setShowAddingButton] = useState(true)\r\n\r\n    useEffect(() => {\r\n        if(previewSource !== ''){\r\n            setShowAddingButton(false)\r\n        }else{\r\n            setShowAddingButton(true)\r\n        }\r\n    }, [previewSource]);\r\n\r\n    return (\r\n        <>\r\n        {chosenProfile !== null ? \r\n        \r\n        <Flex direction=\"row\">\r\n\r\n            {/** Profile pic + infos */}\r\n                <Flex direction=\"column\" marginLeft='12' mb='18'>\r\n\r\n                                        {/** Profile Photo add button */}\r\n                                                                        \r\n                                        <Input  \r\n                                        type=\"file\" \r\n                                        hidden\r\n                                        ref={el => hiddenInput2 = el}\r\n                                        id=\"fileInput\"\r\n                                        class=\"form-control-file\" \r\n                                        onChange={handleFileInputChange2}\r\n                                        value={fileInputState2}\r\n                                        />\r\n                                        {/** Profile image load button */}\r\n                                        {chosenProfile.user == user.id && \r\n                                        <IconButton\r\n                                            variant=\"outline\"\r\n                                            colorScheme=\"teal\"\r\n                                            aria-label=\"Send email\"\r\n                                            width=\"40px\"\r\n                                            onClick={() => hiddenInput2.click()}\r\n                                            icon={<EditIcon />}\r\n                                            />}\r\n\r\n                                            {/** Preview of profile photo */}\r\n                                    {previewSource2 && (\r\n                                        <Center>\r\n                                        <Flex direction=\"column\">\r\n                                        \r\n                                             <Image\r\n                                        src={previewSource2}\r\n                                        alt=\"chosen\"\r\n                                        boxSize=\"300px\"\r\n                                    />\r\n                                     <Button width=\"200px\" onClick={handleSetProfilePhoto} >Add Image</Button>\r\n                                        \r\n                                   </Flex></Center>\r\n                                )}\r\n\r\n                    <Box border=\"2px\" borderColor=\"gray.500\">\r\n                    \r\n                        <Image border=\"2px\" borderColor=\"black.100\" m='1.5' marginBottom='2' boxSize=\"300px\" src={chosenProfile.profilePicture} alt=\"naruto\" objectFit=\"cover\" />\r\n                            \r\n                           {/** Meetings */}\r\n                       {/**\r\n                        \r\n                        <Flex my='2' alignItems=\"center\" direction=\"row\" bg=\"#EEEEEE\" px=\"1\" mx=\"1\" borderRadius=\"3px\" boxShadow=\"base\">\r\n                                    <Icon color=\"#BDBDBD\" w={8} h={8} as={MdGroupWork} />\r\n                                &nbsp;  <Text color=\"#9E9E9E\" fontSize=\"md\" fontWeight=\"bold\" fontFamily=\"sans-serif\">Meetings</Text> \r\n                                <Spacer />\r\n                                <Box bg=\"#1976D2\" borderColor=\"blue.500\" borderRadius=\"full\" > \r\n                                    <Text px='1' color=\"white\" fontFamily=\"sans-serif\" fontSize=\"sm\" >120</Text>\r\n                                </Box>\r\n                           </Flex>\r\n                        */}    \r\n\r\n                           {/** Languages */}\r\n                           <Flex my='2' alignItems=\"center\" direction=\"row\" bg=\"#EEEEEE\" px=\"1\" mx=\"1\" borderRadius=\"3px\" boxShadow=\"base\">\r\n                                    <Icon color=\"#BDBDBD\" w={8} h={8} as={MdLanguage} />\r\n                                &nbsp;  <Text color=\"#9E9E9E\" fontSize=\"md\" fontWeight=\"bold\" fontFamily=\"sans-serif\">Languages</Text> \r\n                                <Spacer />\r\n                                 \r\n                                    <Text px='1' color=\"#9E9E9E\" fontFamily=\"sans-serif\" fontSize=\"sm\" >\r\n                                    {chosenProfile.languages && chosenProfile.languages.length !== 0 ? \r\n                                    chosenProfile.languages.map((language,i) => chosenProfile.languages.length == i + 1 ? language : language + '\\u2022') : 'Not Specified' }\r\n\r\n                                    </Text>\r\n                               \r\n                           </Flex>\r\n\r\n                           {/** Age */}\r\n                           <Flex my='2' alignItems=\"center\" direction=\"row\" bg=\"#EEEEEE\" px=\"1\" mx=\"1\" borderRadius=\"3px\" boxShadow=\"base\">\r\n                                    <Icon color=\"#BDBDBD\" w={8} h={8} as={MdPermContactCalendar} />\r\n                                &nbsp;  <Text color=\"#9E9E9E\" fontSize=\"md\" fontWeight=\"bold\" fontFamily=\"sans-serif\">Age</Text> \r\n                                <Spacer />\r\n                                <Box bg=\"#1976D2\" borderColor=\"blue.500\" borderRadius=\"full\" > \r\n                                    <Text px='1' color=\"white\" fontFamily=\"sans-serif\" fontSize=\"sm\" >\r\n                                        \r\n                                        {moment.duration(moment().diff(moment(chosenProfile.birthDate,'DD-MM-YYYY'))).years()}\r\n                                        \r\n                                    </Text>\r\n                                </Box>\r\n                           </Flex>\r\n\r\n                            {/** Hobbies */}\r\n                            <Flex my='2' alignItems=\"center\" direction=\"row\" bg=\"#EEEEEE\" px=\"1\" mx=\"1\" borderRadius=\"3px\" boxShadow=\"base\">\r\n                                    <Icon color=\"#BDBDBD\" w={8} h={8} as={MdFitnessCenter} />\r\n                                &nbsp;  <Text color=\"#9E9E9E\" fontSize=\"md\" fontWeight=\"bold\" fontFamily=\"sans-serif\">Hobbies</Text> \r\n                                <Spacer />\r\n                                \r\n                                    <Text px='1' color=\"#9E9E9E\" fontFamily=\"sans-serif\" fontSize=\"sm\" >\r\n                                    {chosenProfile.hobbies && chosenProfile.hobbies.length !== 0 ? \r\n                                    chosenProfile.hobbies.map((hobby,i) => chosenProfile.hobbies.length == i + 1 ? hobby : hobby + '\\u2022') : 'Not Specified' }\r\n                                    </Text>\r\n                               \r\n                           </Flex>\r\n                                {/** Buttons */}\r\n                        { chosenProfile.user == user.id &&  \r\n                           \r\n                           <Flex direction=\"row\">\r\n                           <Button onClick={() => setEditMode(true)} marginRight='6px'>\r\n                                <Icon color=\"#C62828\" w={8} h={8} as={MdEdit} />\r\n                                <Text>Edit Profile</Text>\r\n                            </Button>\r\n                            <Button marginRight='6px'>\r\n                                <Icon color=\"#C62828\" w={8} h={8} as={MdPermContactCalendar} />\r\n                                <Text>Meetings</Text>\r\n                            </Button>\r\n                           </Flex> \r\n                        }\r\n                           \r\n\r\n                    </Box>\r\n\r\n                </Flex>\r\n\r\n\r\n\r\n             {/** portfolio + desc */}\r\n\r\n                <Flex direction=\"column\">\r\n                                        \r\n\r\n                                  {/** Preview of photo */}\r\n                                    {previewSource && (\r\n                                        <Center>\r\n                                        <Flex direction=\"column\">\r\n                                        \r\n                                             <Image\r\n                                        src={previewSource}\r\n                                        alt=\"chosen\"\r\n                                        boxSize=\"300px\"\r\n                                    />\r\n                                     <Button width=\"200px\" onClick={addPhotoToPortfolioLocal}  hidden={showAddingButton}>Add To portfolio</Button>\r\n                                        \r\n                                   </Flex></Center>\r\n                                )}\r\n                               \r\n                                \r\n\r\n\r\n                                        {/** Portfolio hidden add button */}\r\n                                                                        \r\n                                        <Input  \r\n                                        type=\"file\" \r\n                                        hidden\r\n                                        ref={el => hiddenInput = el}\r\n                                        id=\"fileInput\"\r\n                                        class=\"form-control-file\" \r\n                                        onChange={handleFileInputChange}\r\n                                        value={fileInputState}\r\n                                        />\r\n                                        {/** Portfolio image load button */}\r\n                                        {chosenProfile.user == user.id && \r\n                                        <IconButton\r\n                                            marginLeft=\"200\"\r\n                                            variant=\"outline\"\r\n                                            colorScheme=\"teal\"\r\n                                            aria-label=\"Send email\"\r\n                                            width=\"40px\"\r\n                                            onClick={() => hiddenInput.click()}\r\n                                            icon={<AddIcon />}\r\n                                            />}\r\n                                            \r\n\r\n                    <Flex overflowX=\"scroll\" direction=\"row\" marginLeft=\"200\">\r\n                    {chosenProfile.portfolio.length !== 0 && \r\n                     chosenProfile.portfolio.slice(0).reverse().map(image => \r\n                     \r\n                        <Image cursor=\"pointer\" onClick={() => handleOpen(image)}  m='1.5' marginBottom='2' boxSize=\"250px\" src={image} alt=\"naruto\" objectFit=\"cover\" />\r\n                    \r\n                     )\r\n                    }\r\n                       </Flex>\r\n\r\n                       <Modal isOpen={isOpen} onClose={onClose}>\r\n                            <ModalOverlay />\r\n                            <ModalContent>\r\n                           \r\n                            <ModalCloseButton />\r\n                            <ModalBody>\r\n                            <Image   boxSize=\"500px\" src={modalImage} alt=\"naruto\" objectFit=\"cover\" />\r\n                            </ModalBody>\r\n                            </ModalContent>\r\n                        </Modal>\r\n\r\n                { editMode ? \r\n                \r\n                <Flex mx='200' direction=\"column\">\r\n                        {/** Here gooes editing form */}\r\n                        <form onSubmit={onSubmit}>\r\n                        <Flex direction=\"column\">\r\n                             <Heading>Full Name</Heading>\r\n                             <Input type=\"text\" name=\"fullName\" placeholder=\"Full Name\" value={editedProfile.fullName} onChange={onChangeEdited} />\r\n                        </Flex>\r\n                        <Flex direction=\"column\">\r\n                             <Heading>Bio</Heading>\r\n                             <Textarea type=\"text\" name=\"description\" placeholder=\"Bio\" value={editedProfile.description} onChange={onChangeEdited} />\r\n                        </Flex>\r\n\r\n                        <Box>\r\n                                <Heading>Gender</Heading>\r\n                                <Select name=\"sexe\" placeholder=\"Select option\" height='100px' width=\"300px\" value={editedProfile.sexe} onChange={onChangeEdited}>\r\n                                    <option value=\"Male\">Male</option>\r\n                                    <option value=\"Female\">Female</option>\r\n                                    <option value=\"Other\">Other</option>\r\n                                </Select>  \r\n                                </Box>\r\n                    \r\n                    <Flex direction=\"row\">\r\n                               <Box>\r\n                                <Heading>Languages</Heading>\r\n                                <Select name=\"languages\" placeholder=\"Select option\" multiple height='100px' width=\"300px\" value={editedProfile.languages} onChange={onChangeSelectLanguage}>\r\n                                    <option value=\"German\">German</option>\r\n                                    <option value=\"English\">English</option>\r\n                                    <option value=\"French\">French</option>\r\n                                    <option value=\"Dutch\">Dutch</option>\r\n                                    <option value=\"Italian\">Italian</option>\r\n                                </Select>  \r\n                                </Box>\r\n\r\n                                <Spacer />\r\n\r\n                                <Box>\r\n                                <Heading>Hobbies</Heading>\r\n                                <Select name=\"hobbies\" placeholder=\"Select option\" multiple height='100px' width=\"300px\" value={editedProfile.hobbies} onChange={onChangeSelectHobby}>\r\n                                    <option value=\"Football\">Football</option>\r\n                                    <option value=\"Skydiving\">Skydiving</option>\r\n                                    <option value=\"Swimming\">Swimming</option>\r\n                                    <option value=\"Tennis\">Tennis</option>\r\n                                    <option value=\"Art\">Art</option>\r\n                                </Select>  \r\n                                </Box>\r\n\r\n                    </Flex>\r\n\r\n                        <Flex direction=\"column\">\r\n                             <Heading>City</Heading>\r\n                             <Input type=\"text\" name=\"city\" placeholder=\"City\" value={editedProfile.city} onChange={onChangeEdited} />\r\n                        </Flex>\r\n                        \r\n                        <Flex direction=\"column\">\r\n                             <Heading>Address</Heading>\r\n                             <Textarea type=\"text\" name=\"address\" placeholder=\"Address\" value={editedProfile.address} onChange={onChangeEdited} />\r\n                        </Flex>\r\n                        <Box>\r\n                        <Heading>Birthday</Heading>\r\n                        <Flex direction=\"row\">\r\n                        <Input type=\"number\" name=\"day\" placeholder=\"Day\" value={editedBirthday.day} onChange={onChangeEditedBirthday} />\r\n                        <Input type=\"number\" name=\"month\" placeholder=\"Month\" value={editedBirthday.month} onChange={onChangeEditedBirthday} />\r\n                        <Input type=\"number\" name=\"year\" placeholder=\"Year\" value={editedBirthday.year} onChange={onChangeEditedBirthday} />\r\n                        </Flex>\r\n                        </Box>\r\n                        <br />\r\n                        <Button type=\"submit\" marginRight='6px'>\r\n                                <Icon color=\"#C62828\" w={8} h={8} as={MdSave} />\r\n                                <Text>Save Changes</Text>\r\n                        </Button>\r\n                        <Button onClick={() => setEditMode(false)} marginRight='6px'>\r\n                                <Icon color=\"#C62828\" w={8} h={8} as={MdKeyboardReturn} />\r\n                                <Text>Return</Text>\r\n                        </Button>\r\n                        </form>\r\n                </Flex> \r\n                \r\n                    :   \r\n                \r\n                            <Box marginLeft=\"200\">\r\n                                <Heading>{chosenProfile.fullName}</Heading>\r\n                                <Text  fontSize=\"xl\">\r\n                                {chosenProfile.description}\r\n                                </Text>\r\n                            </Box> \r\n                     }\r\n                     \r\n                      \r\n\r\n                </Flex>\r\n\r\n\r\n\r\n            </Flex> : \r\n\r\n            <Box>\r\n                <Spinner size=\"xl\" />\r\n            </Box>\r\n            \r\n        }\r\n            \r\n\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\context\\app\\AppState.js",["157","158","159","160"],"import React, { useReducer , useContext} from 'react';\r\nimport AppContext from './AppContext'\r\nimport AppReducer from './AppReducer'\r\n\r\nimport generalApi from '../../axios/GeneralApi'\r\nimport {PERSIST_COMM_PROFILES,\r\n        PERSIST_CHOSEN_PROFILE,\r\n        UPDATE_PROFILE,\r\n        CLEAR_FILTER_REC,\r\n        FILTER_REC_LOC,\r\n        FILTER_REC_THEME,\r\n        PERSIST_RECOMMANDATIONS,\r\n        PERSIST_QUESTIONS,\r\n        FILTER_QUE_LOC,\r\n        FILTER_QUE_THEME,\r\n        CLEAR_FILTER_QUE,\r\n        PERSIST_USER_MEETINGS,\r\n        FILTER_PRO_LOC,\r\n        FILTER_PRO_GEN,\r\n        FILTER_PRO_LANG,\r\n        FILTER_PRO_AGE,\r\n        CLEAR_FILTER_PRO,\r\n        PERSIST_CITIES\r\n    \r\n    \r\n    } from '../types'\r\nimport setAuthToken from '../../utils/setAuthToken'\r\n\r\nconst AppState = props => {\r\n\r\n    const initialState = {\r\n        communityProfiles: [],\r\n        filteredCommunityProfiles: null,\r\n        chosenProfile: null,\r\n        recommandations: [],\r\n        filteredRecommandations:null,\r\n        questions: [],\r\n        filteredQuestions: null,\r\n        userMeetings: [],\r\n        cities: []\r\n    }\r\n\r\n    \r\n\r\n   const [state, dispatch] = useReducer(AppReducer, initialState)\r\n\r\n   // Action :\r\n\r\n   const getProfiles = async () => {\r\n\r\n       try{\r\n        const res = await generalApi.get('/api/profiles')\r\n\r\n        dispatch({\r\n            type: PERSIST_COMM_PROFILES,\r\n            payload: res.data\r\n        })\r\n\r\n       } catch(err){\r\n           console.log(err.message)\r\n       }\r\n\r\n   }\r\n\r\n   // get Chosen Profile\r\n\r\n   const getChosenProfile = async id => {\r\n\r\n    try{\r\n     const res = await generalApi.get(`/api/profiles/user/${id}`)\r\n\r\n     dispatch({\r\n         type: PERSIST_CHOSEN_PROFILE,\r\n         payload: res.data\r\n     })\r\n\r\n    } catch(err){\r\n        console.log(err.message)\r\n    }\r\n\r\n}\r\n\r\n\r\nconst updateProfile = async data => {\r\n    \r\n    setAuthToken(localStorage.token)\r\n    console.log('Hey update here')\r\n    try{\r\n     \r\n      const res = await generalApi.patch(`/api/profiles/${data._id}`,data)\r\n      dispatch({\r\n        type: UPDATE_PROFILE,\r\n        payload: res.data\r\n    })\r\n\r\n    } catch(err){\r\n        console.log(err.message)\r\n    }\r\n\r\n}\r\nconst addPhotoToPortfolio = async (data,id) => {\r\n    \r\n    setAuthToken(localStorage.token)\r\n    //console.log('Hey update here')\r\n    try{\r\n     \r\n        const res = await generalApi.patch(`/api/profiles/portfolio/${id}`,data)\r\n        dispatch({\r\n            type: UPDATE_PROFILE,\r\n            payload: res.data\r\n        })\r\n    } catch(err){\r\n        console.log(err.message)\r\n    }\r\n\r\n}\r\n\r\nconst editProfilePhoto = async (data,id) => {\r\n    \r\n    setAuthToken(localStorage.token)\r\n    //console.log('Hey update here')\r\n    try{\r\n     \r\n        const res = await generalApi.patch(`/api/profiles/${id}`,data)\r\n        dispatch({\r\n            type: UPDATE_PROFILE,\r\n            payload: res.data\r\n        })\r\n    } catch(err){\r\n        console.log(err.message)\r\n    }\r\n\r\n}\r\n\r\n    //get all recommandations\r\n\r\n    const getAllRecommandations = async () => {\r\n        try{\r\n     \r\n            const res = await generalApi.get(`/api/recommandations`)\r\n            dispatch({\r\n                type: PERSIST_RECOMMANDATIONS,\r\n                payload: res.data\r\n            })\r\n        } catch(err){\r\n            console.log(err.message)\r\n        }\r\n    }\r\n\r\n    // Add recommendation\r\n\r\n   const addRecommandation = async data => {\r\n       try {\r\n           setAuthToken(localStorage.token)\r\n           await generalApi.post('/api/recommandations',data)\r\n\r\n       } catch (error) {\r\n           console.log(error)\r\n       }\r\n   }\r\n\r\n\r\n// Comment a recommandation\r\n\r\nconst commentRecommandation = async (id,data) => {\r\n\r\n    try {\r\n        setAuthToken(localStorage.token)\r\n        await generalApi.post(`/api/comments/recommandations/${id}`,data)\r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n}\r\n\r\n\r\n   // Filter Recommandations by Location\r\n\r\n   const filterRecByLocation = text => {\r\n    dispatch({type: FILTER_REC_LOC , payload: text })\r\n}\r\n\r\n   // Filter Recommandations by Theme\r\n\r\nconst filterRecByTheme = text => {\r\n    dispatch({type: FILTER_REC_THEME , payload: text })\r\n}\r\n\r\n   // Clear Filter Recommandation\r\n   const clearFilterRec = () => {\r\n    dispatch({type: CLEAR_FILTER_REC })\r\n}\r\n\r\n\r\n\r\n//-------------- Question Actions:-------------\r\n\r\n  //get all questions\r\n\r\n  const getAllQuestions = async () => {\r\n    try{\r\n \r\n        const res = await generalApi.get(`/api/questions`)\r\n        dispatch({\r\n            type: PERSIST_QUESTIONS,\r\n            payload: res.data\r\n        })\r\n    } catch(err){\r\n        console.log(err.message)\r\n    }\r\n}\r\n\r\n// Add question\r\n\r\nconst addQuestion = async data => {\r\n   try {\r\n       setAuthToken(localStorage.token)\r\n       await generalApi.post('/api/questions',data)\r\n\r\n   } catch (error) {\r\n       console.log(error)\r\n   }\r\n}\r\n\r\n\r\n// Comment a question\r\n\r\nconst commentQuestion = async (id,data) => {\r\n\r\ntry {\r\n    setAuthToken(localStorage.token)\r\n    await generalApi.post(`/api/comments/questions/${id}`,data)\r\n\r\n} catch (error) {\r\n    console.log(error)\r\n}\r\n\r\n}\r\n\r\n\r\n// Filter Questions by Location\r\n\r\nconst filterQueByLocation = text => {\r\ndispatch({type: FILTER_QUE_LOC , payload: text })\r\n}\r\n\r\n// Filter Questions by Theme\r\n\r\nconst filterQueByTheme = text => {\r\ndispatch({type: FILTER_QUE_THEME , payload: text })\r\n}\r\n\r\n// Clear Filter Question\r\nconst clearFilterQue = () => {\r\ndispatch({type: CLEAR_FILTER_QUE })\r\n}\r\n\r\n\r\n\r\n// Get all user meetings\r\n\r\nconst getUserMeetings = async () => {\r\n\r\n\r\n    try{\r\n     setAuthToken(localStorage.token)\r\n     const res = await generalApi.get('/api/meetings')\r\n\r\n     dispatch({\r\n         type: PERSIST_USER_MEETINGS,\r\n         payload: res.data\r\n     })\r\n\r\n    } catch(err){\r\n        console.log(err.message)\r\n    }\r\n}\r\n\r\nconst requestMeeting = async(hosterId,data) => {\r\n\r\n    try{\r\n     setAuthToken(localStorage.token)\r\n     await generalApi.post(`/api/meetings/${hosterId}`,data)\r\n\r\n    } catch(err){\r\n        console.log(err.message)\r\n    }\r\n\r\n}\r\n\r\nconst acceptMeeting = async meetingId => {\r\n    try{\r\n        setAuthToken(localStorage.token)\r\n        let data = {statut : \"confirmed\"}\r\n        await generalApi.patch(`/api/meetings/${meetingId}`,data)\r\n   \r\n       } catch(err){\r\n           console.log(err.message)\r\n       }\r\n\r\n}\r\n\r\nconst finishMeeting = async meetingId => {\r\n    try{\r\n        setAuthToken(localStorage.token)\r\n        let data = {statut : \"finished\"}\r\n        await generalApi.patch(`/api/meetings/${meetingId}`,data)\r\n   \r\n       } catch(err){\r\n           console.log(err.message)\r\n       }\r\n\r\n}\r\n\r\n\r\n// Filters for profiles:\r\n\r\nconst filterProByLocation = text => {\r\n    dispatch({type: FILTER_PRO_LOC , payload: text })\r\n}\r\n\r\nconst clearFilterPro = () => {\r\n    dispatch({type: CLEAR_FILTER_PRO })\r\n}\r\n\r\n\r\nconst getAllCities = async () => {\r\n    try{\r\n\r\n       const res = await generalApi.get(`/api/cities`)\r\n       dispatch({\r\n           type: PERSIST_CITIES,\r\n           payload: res.data\r\n       })\r\n   \r\n       } catch(err){\r\n           console.log(err.message)\r\n       }\r\n}\r\n\r\n   return (\r\n       <AppContext.Provider \r\n       value={{\r\n        communityProfiles: state.communityProfiles,\r\n        filteredCommunityProfiles: state.filteredCommunityProfiles,\r\n        chosenProfile: state.chosenProfile,\r\n        recommandations: state.recommandations,\r\n        filteredRecommandations: state.filteredRecommandations,\r\n        questions: state.questions,\r\n        filteredQuestions: state.filteredQuestions,\r\n        userMeetings: state.userMeetings,\r\n        cities: state.cities,\r\n        getProfiles,\r\n        getChosenProfile,\r\n        updateProfile,\r\n        addPhotoToPortfolio,\r\n        editProfilePhoto,\r\n        getAllRecommandations,\r\n        addRecommandation,\r\n        commentRecommandation,\r\n        filterRecByTheme,\r\n        filterRecByLocation,\r\n        clearFilterRec,\r\n        getAllQuestions,\r\n        addQuestion,\r\n        commentQuestion,\r\n        filterQueByLocation,\r\n        filterQueByTheme,\r\n        clearFilterQue,\r\n        getUserMeetings,\r\n        requestMeeting,\r\n        acceptMeeting,\r\n        finishMeeting,\r\n        filterProByLocation,\r\n        clearFilterPro,\r\n        getAllCities\r\n       }}>\r\n\r\n           {props.children}\r\n       </AppContext.Provider>\r\n   )\r\n\r\n}\r\nexport default AppState","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\context\\app\\AppContext.js",[],"C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\context\\app\\AppReducer.js",["161","162","163"],"C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\AddProfile.js",["164","165"],"import { Box, Button, Spacer,Text, Flex, Heading, Icon, Input, Select, Textarea } from '@chakra-ui/react'\r\nimport React,{useEffect,useContext,useState} from 'react'\r\nimport { MdSave } from 'react-icons/md'\r\nimport AuthContext from '../context/auth/AuthContext'\r\n\r\nimport AppContext from '../context/app/AppContext'\r\n\r\nconst AddProfile = props => {\r\n    \r\n\r\n    const authContext = useContext(AuthContext)\r\n    const {user,addProfile,profile} = authContext\r\n\r\n    const appContext = useContext(AppContext)\r\n    const {getChosenProfile} = appContext\r\n\r\n    const [editedProfile,setEditedProfile] = useState({hobbies:[],\r\n    languages:[]})\r\n    const [editedBirthday, setEditedBirthday] = useState({\r\n        day:'',month:'',year:''\r\n    })\r\n\r\n    const onChangeEdited = e => {\r\n        setEditedProfile({...editedProfile,\r\n                    [e.target.name]:e.target.value\r\n            })\r\n    }\r\n\r\n    const onChangeSelectLanguage = e => {\r\n        if(!editedProfile.languages.includes(e.target.value)){\r\n            setEditedProfile({...editedProfile,\r\n                    [e.target.name]:[...editedProfile.languages,e.target.value]\r\n            })\r\n        }else{\r\n            setEditedProfile({...editedProfile,\r\n                [e.target.name]:editedProfile.languages.filter(lang => lang !== e.target.value)\r\n        })\r\n        }\r\n        \r\n    }\r\n\r\n    const onChangeSelectHobby = e => {\r\n        if(!editedProfile.hobbies.includes(e.target.value)){\r\n            setEditedProfile({...editedProfile,\r\n                    [e.target.name]:[...editedProfile.hobbies,e.target.value]\r\n            })\r\n        }else{\r\n            setEditedProfile({...editedProfile,\r\n                [e.target.name]:editedProfile.hobbies.filter(hob => hob !== e.target.value)\r\n        })\r\n        }\r\n        \r\n    }\r\n\r\n    const onChangeEditedBirthday = e => {\r\n        setEditedBirthday({...editedBirthday,\r\n                [e.target.name]:e.target.value\r\n        })\r\n    }\r\n\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        let birthDate = editedBirthday.day+\"-\"+editedBirthday.month+\"-\"+editedBirthday.year\r\n        editedProfile.birthDate = birthDate\r\n        addProfile(editedProfile)\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        if(profile !== null){\r\n            getChosenProfile(profile.user)\r\n            props.history.push(`/profile/${profile._id}`)\r\n        }\r\n    }, [props.history,profile]);\r\n\r\n\r\n    return (\r\n        <Flex mx='200' direction=\"column\">\r\n                        {/** Here gooes editing form */}\r\n                        <form onSubmit={onSubmit}>\r\n                        <Flex direction=\"column\">\r\n                             <Heading>Full Name</Heading>\r\n                             <Input type=\"text\" name=\"fullName\" placeholder=\"Full Name\" value={editedProfile.fullName} onChange={onChangeEdited} />\r\n                        </Flex>\r\n                        <Flex direction=\"column\">\r\n                             <Heading>Bio</Heading>\r\n                             <Textarea type=\"text\" name=\"description\" placeholder=\"Bio\" value={editedProfile.description} onChange={onChangeEdited} />\r\n                        </Flex>\r\n                    \r\n                    <Flex direction=\"row\">\r\n\r\n                    <Box>\r\n                                <Heading>Gender</Heading>\r\n                                <Select name=\"sexe\" placeholder=\"Select option\" height='100px' width=\"300px\" value={editedProfile.sexe} onChange={onChangeEdited}>\r\n                                    <option value=\"Male\">Male</option>\r\n                                    <option value=\"Female\">Female</option>\r\n                                    <option value=\"Other\">Other</option>\r\n                                </Select>  \r\n                                </Box>\r\n                               <Box>\r\n                                <Heading>Languages</Heading>\r\n                                <Select name=\"languages\" placeholder=\"Select option\" multiple height='100px' width=\"300px\" value={editedProfile.languages} onChange={onChangeSelectLanguage}>\r\n                                    <option value=\"German\">German</option>\r\n                                    <option value=\"English\">English</option>\r\n                                    <option value=\"French\">French</option>\r\n                                    <option value=\"Dutch\">Dutch</option>\r\n                                    <option value=\"Italian\">Italian</option>\r\n                                </Select>  \r\n                                </Box>\r\n\r\n                                <Spacer />\r\n\r\n                                <Box>\r\n                                <Heading>Hobbies</Heading>\r\n                                <Select name=\"hobbies\" placeholder=\"Select option\" multiple height='100px' width=\"300px\" value={editedProfile.hobbies} onChange={onChangeSelectHobby}>\r\n                                    <option value=\"Football\">Football</option>\r\n                                    <option value=\"Skydiving\">Skydiving</option>\r\n                                    <option value=\"Swimming\">Swimming</option>\r\n                                    <option value=\"Tennis\">Tennis</option>\r\n                                    <option value=\"Art\">Art</option>\r\n                                </Select>  \r\n                                </Box>\r\n\r\n                    </Flex>\r\n                        \r\n                        <Flex direction=\"column\">\r\n                             <Heading>Address</Heading>\r\n                             <Textarea type=\"text\" name=\"address\" placeholder=\"Address\" value={editedProfile.address} onChange={onChangeEdited} />\r\n                        </Flex>\r\n\r\n                        <Flex direction=\"column\">\r\n                             <Heading>City</Heading>\r\n                             <Input type=\"text\" name=\"city\" placeholder=\"City\" value={editedProfile.city} onChange={onChangeEdited} />\r\n                        </Flex>\r\n                        <Box>\r\n                        <Heading>Birthday</Heading>\r\n                        <Flex direction=\"row\">\r\n                        <Input type=\"number\" name=\"day\" placeholder=\"Day\" value={editedBirthday.day} onChange={onChangeEditedBirthday} />\r\n                        <Input type=\"number\" name=\"month\" placeholder=\"Month\" value={editedBirthday.month} onChange={onChangeEditedBirthday} />\r\n                        <Input type=\"number\" name=\"year\" placeholder=\"Year\" value={editedBirthday.year} onChange={onChangeEditedBirthday} />\r\n                        </Flex>\r\n                        </Box>\r\n                        <br />\r\n                        <Button type=\"submit\" marginRight='6px'>\r\n                                <Icon color=\"#C62828\" w={8} h={8} as={MdSave} />\r\n                                <Text>Save Changes</Text>\r\n                        </Button>\r\n                        </form>\r\n                </Flex> \r\n    )\r\n}\r\n\r\nexport default AddProfile\r\n","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Recommandations.js",["166","167","168","169"],"import React,{useContext,useRef,useEffect,useState} from 'react'\r\nimport AppContext from '../context/app/AppContext'\r\nimport {useDisclosure,Image,Select,Center,Box,Flex,Heading,Input,InputGroup,InputLeftElement,Icon, Button, Collapse, Text} from '@chakra-ui/react'\r\nimport {AddIcon} from '@chakra-ui/icons'\r\nimport { MdMyLocation } from 'react-icons/md'\r\nimport Recommandation from './Recommandation'\r\n\r\nconst Recommandations = props => {\r\n\r\n    const { match: { params } } = props \r\n\r\n    let hiddenInput = null\r\n    const [fileInputState, setFileInputState] = useState('')\r\n\r\n    const [previewSource, setPreviewSource] = useState('')\r\n\r\n    const [selectedFile, setSelectedFile] = useState()\r\n\r\n    useEffect(() => {\r\n        if(previewSource != ''){\r\n            setRec({...rec,picture:previewSource})\r\n        }\r\n    }, [previewSource]);\r\n    const handleFileInputChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if(file instanceof Blob){\r\n            previewFile(file);\r\n        setSelectedFile(file);\r\n        setFileInputState(e.target.value);\r\n        }else{\r\n            setPreviewSource('');\r\n            setFileInputState('');\r\n        }\r\n        \r\n    }\r\n    const previewFile = (file) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onloadend = () => {\r\n            setPreviewSource(reader.result);\r\n        };\r\n    }\r\n    const [rec, setRec] = useState('')\r\n\r\n    const onChangeRec = e => {\r\n        setRec({...rec,[e.target.name]:e.target.value})\r\n    }\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        if (!selectedFile) return;\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(selectedFile);\r\n        reader.onloadend = () => {\r\n            addRecommandation(rec).then(() => getAllRecommandations())\r\n            setFileInputState('')\r\n            setPreviewSource('')\r\n            setRec({})\r\n            onToggle()\r\n        }\r\n        \r\n       \r\n    }\r\n\r\n\r\n    const appContext = useContext(AppContext)\r\n    const {getAllRecommandations,addRecommandation,\r\n        recommandations,filteredRecommandations,clearFilterRec,\r\n            filterRecByTheme,\r\n            filterRecByLocation} = appContext\r\n\r\n    const textLoc = useRef('')\r\n    const textTheme = useRef('')\r\n\r\n    const { isOpen, onToggle } = useDisclosure()\r\n\r\n    useEffect(() => {\r\n        getAllRecommandations().then(_ => {\r\n            console.log('here: ',params.chosenCity)\r\n            if(params.chosenCity){\r\n              console.log('#####here undef')\r\n              textLoc.current = params.chosenCity\r\n              filterRecByLocation(params.chosenCity)\r\n            }\r\n          })\r\n    }, [])\r\n\r\n\r\n    const onChangeLoc = e => {\r\n        if(textLoc.current.value !== ''){\r\n            filterRecByLocation(e.target.value)\r\n        }\r\n        else{\r\n            clearFilterRec()\r\n        }\r\n    }\r\n\r\n    const onChangeTheme = e => {\r\n        if(textTheme.current.value !== ''){\r\n            filterRecByTheme(e.target.value)\r\n        }\r\n        else{\r\n            clearFilterRec()\r\n        }\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <>\r\n        {/*/Filters */}\r\n\r\n        <Box textAlign=\"center\">\r\n            <Heading>Search For Recommandation</Heading>\r\n          </Box>\r\n          <br />\r\n         <Center>\r\n          <Flex gridColumnGap={4} gridRowGap={4}\r\n          justify={[\"center\", \"space-between\", \"flex-end\", \"flex-end\"]}\r\n          direction={[\"column\", \"row\", \"row\", \"row\"]}\r\n          pt={[4, 4, 0, 0]} spacing={3}>\r\n                <InputGroup>\r\n                    <InputLeftElement\r\n                    pointerEvents=\"none\"\r\n                    children={<Icon color=\"gray.300\" as={MdMyLocation} />}\r\n                    />\r\n                    <Input type=\"text\" placeholder=\"Location/City\" ref={textLoc} onChange={onChangeLoc} />\r\n                </InputGroup>\r\n\r\n                <InputGroup>\r\n                    <InputLeftElement\r\n                    pointerEvents=\"none\"\r\n                    children={<Icon color=\"gray.300\" />}\r\n                    />\r\n                    <Input type=\"text\" placeholder=\"Theme\" ref={textTheme} onChange={onChangeTheme} />\r\n                </InputGroup>\r\n\r\n            </Flex>\r\n            </Center>\r\n        <br />\r\n       <Center><Button onClick={onToggle}>Add Recommandation</Button></Center> \r\n        <br />\r\n\r\n        {/* Add Recommandation */}\r\n        <form onSubmit={onSubmit}>\r\n            <Center>\r\n                <Collapse in={isOpen} animateOpacity>\r\n                    <Box\r\n                    p=\"40px\"\r\n                    color=\"white\"\r\n                    mt=\"4\"\r\n                    bg=\"#263238\"\r\n                    rounded=\"md\"\r\n                    shadow=\"md\"\r\n                    >\r\n                         <Input type=\"text\" placeholder=\"Description\" name=\"description\" value={rec.description} onChange={onChangeRec} />\r\n                 <br />  <Input type=\"text\" placeholder=\"City\" name=\"city\" value={rec.city} onChange={onChangeRec} />\r\n                 <br />  <Input type=\"text\" placeholder=\"Address\" name=\"location\" value={rec.location} onChange={onChangeRec} />\r\n                 <br />  <Select placeholder=\"Select a theme\" name=\"theme\" value={rec.theme} onChange={onChangeRec}>\r\n                            <option value=\"Food\">Food</option>\r\n                            <option value=\"Hotel\">Hotel</option>\r\n                            <option value=\"Monuments\">Monuments</option>\r\n                            <option value=\"Restaurants\">Restaurants</option>\r\n                            <option value=\"Museums\">Museums</option>\r\n                            <option value=\"Parks\">Parks</option>\r\n                            <option value=\"Beaches\">Beaches</option>\r\n                            <option value=\"Nature\">Nature</option>\r\n                            <option value=\"Amusement Parks\">Amusement Parks</option>\r\n                            <option value=\"Zoo\">Zoo</option>\r\n                            <option value=\"Lake\">Lake</option>\r\n                            <option value=\"Casino\">Casino</option>\r\n                            <option value=\"Mountain\">Mountain</option>\r\n                         </Select>\r\n\r\n                           {/** Recommandation image add button */}\r\n                                                                        \r\n                                        <Input  \r\n                                        type=\"file\" \r\n                                        hidden\r\n                                        ref={el => hiddenInput = el}\r\n                                        id=\"fileInput\"\r\n                                        class=\"form-control-file\" \r\n                                        onChange={handleFileInputChange}\r\n                                        value={fileInputState}\r\n                                        />\r\n                                        {/** Recommandation image load button */}\r\n                                        \r\n                                         <Center>\r\n                                             <Button leftIcon={<AddIcon />} onClick={() => hiddenInput.click()} colorScheme=\"blue\" variant=\"outline\">\r\n                                                Add Image\r\n                                            </Button>\r\n                                         </Center>\r\n                                          {/** Preview of photo */}\r\n                                    {previewSource && (\r\n                                        <Center>\r\n                                        <Flex direction=\"column\">\r\n                                        \r\n                                             <Image\r\n                                        src={previewSource}\r\n                                        alt=\"chosen\"\r\n                                        boxSize=\"300px\"\r\n                                    />    \r\n                                   </Flex></Center>\r\n                                )}\r\n<br />\r\n                   <Center><Button type=\"submit\">Recommend !</Button></Center>     \r\n                    \r\n                    </Box>\r\n                </Collapse>\r\n            </Center></form>\r\n\r\n             {/* Recommandation list */}\r\n        \r\n        {recommandations !== null ? (\r\n            <Center>\r\n\r\n            \r\n        <Box minH=\"60vh\" mb=\"5\" w=\"800px\">\r\n          {filteredRecommandations !== null\r\n            ? filteredRecommandations.map(frec => (\r\n\r\n                  <Recommandation rec={frec} />\r\n                \r\n              ))\r\n            : recommandations.map(rec => (\r\n                \r\n                  <Recommandation rec={rec} />\r\n                \r\n              ))}\r\n        </Box>\r\n        </Center>\r\n      ):<p>loading...</p>}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Recommandations\r\n","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Recommandation.js",[],"C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Questions.js",["170","171","172","173"],"import React,{useContext,useRef,useEffect,useState} from 'react'\r\nimport AppContext from '../context/app/AppContext'\r\nimport {useDisclosure,Image,Select,Center,Box,Flex,Heading,Input,InputGroup,InputLeftElement,Icon, Button, Collapse, Text} from '@chakra-ui/react'\r\nimport {AddIcon} from '@chakra-ui/icons'\r\nimport { MdMyLocation } from 'react-icons/md'\r\nimport Question from './Question'\r\n\r\nconst Questions = () => {\r\n\r\n    const appContext = useContext(AppContext)\r\n    const {getAllQuestions,addQuestion,\r\n        questions,filteredQuestions,clearFilterQue,\r\n            filterQueByTheme,\r\n            filterQueByLocation} = appContext\r\n            useEffect(() => {\r\n               getAllQuestions()\r\n            }, []);\r\n            \r\n    let hiddenInput = null\r\n    const [fileInputState, setFileInputState] = useState('')\r\n\r\n    const [previewSource, setPreviewSource] = useState('')\r\n\r\n    const [selectedFile, setSelectedFile] = useState()\r\n\r\n    useEffect(() => {\r\n        if(previewSource != ''){\r\n            setRec({...rec,picture:previewSource})\r\n        }\r\n    }, [previewSource]);\r\n    const handleFileInputChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if(file instanceof Blob){\r\n            previewFile(file);\r\n        setSelectedFile(file);\r\n        setFileInputState(e.target.value);\r\n        }else{\r\n            setPreviewSource('');\r\n            setFileInputState('');\r\n        }\r\n        \r\n    }\r\n    const previewFile = (file) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onloadend = () => {\r\n            setPreviewSource(reader.result);\r\n        };\r\n    }\r\n    const [rec, setRec] = useState('')\r\n\r\n    const onChangeRec = e => {\r\n        setRec({...rec,[e.target.name]:e.target.value})\r\n    }\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        if (!selectedFile) return;\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(selectedFile);\r\n        reader.onloadend = () => {\r\n            addQuestion(rec).then(() => getAllQuestions())\r\n            setFileInputState('')\r\n            setPreviewSource('')\r\n            setRec({})\r\n            onToggle()\r\n        }\r\n        \r\n       \r\n    }\r\n\r\n\r\n    \r\n\r\n    const textLoc = useRef('')\r\n    const textTheme = useRef('')\r\n\r\n    const { isOpen, onToggle } = useDisclosure()\r\n\r\n\r\n    const onChangeLoc = e => {\r\n        if(textLoc.current.value !== ''){\r\n            filterQueByLocation(e.target.value)\r\n        }\r\n        else{\r\n            clearFilterQue()\r\n        }\r\n    }\r\n\r\n    const onChangeTheme = e => {\r\n        if(textTheme.current.value !== ''){\r\n            filterQueByTheme(e.target.value)\r\n        }\r\n        else{\r\n            clearFilterQue()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {/*/Filters */}\r\n\r\n        <Box textAlign=\"center\">\r\n            <Heading>Search For Questions</Heading>\r\n          </Box>\r\n          <br />\r\n         <Center>\r\n          <Flex gridColumnGap={4} gridRowGap={4}\r\n          justify={[\"center\", \"space-between\", \"flex-end\", \"flex-end\"]}\r\n          direction={[\"column\", \"row\", \"row\", \"row\"]}\r\n          pt={[4, 4, 0, 0]} spacing={3}>\r\n                <InputGroup>\r\n                    <InputLeftElement\r\n                    pointerEvents=\"none\"\r\n                    children={<Icon color=\"gray.300\" as={MdMyLocation} />}\r\n                    />\r\n                    <Input type=\"text\" placeholder=\"Location/City\" ref={textLoc} onChange={onChangeLoc} />\r\n                </InputGroup>\r\n\r\n                <InputGroup>\r\n                    <InputLeftElement\r\n                    pointerEvents=\"none\"\r\n                    children={<Icon color=\"gray.300\" />}\r\n                    />\r\n                    <Input type=\"text\" placeholder=\"Theme\" ref={textTheme} onChange={onChangeTheme} />\r\n                </InputGroup>\r\n\r\n            </Flex>\r\n            </Center>\r\n        <br />\r\n       <Center><Button onClick={onToggle}>Add Question</Button></Center> \r\n        <br />\r\n\r\n        {/* Add Question */}\r\n        <form onSubmit={onSubmit}>\r\n            <Center>\r\n                <Collapse in={isOpen} animateOpacity>\r\n                    <Box\r\n                    p=\"40px\"\r\n                    color=\"white\"\r\n                    mt=\"4\"\r\n                    bg=\"#263238\"\r\n                    rounded=\"md\"\r\n                    shadow=\"md\"\r\n                    >\r\n                         <Input type=\"text\" placeholder=\"Description\" name=\"description\" value={rec.description} onChange={onChangeRec} />\r\n                 <br />  <Input type=\"text\" placeholder=\"City\" name=\"city\" value={rec.city} onChange={onChangeRec} />\r\n                 <br />  <Input type=\"text\" placeholder=\"Address\" name=\"location\" value={rec.location} onChange={onChangeRec} />\r\n                 <br />  <Select placeholder=\"Select a theme\" name=\"theme\" value={rec.theme} onChange={onChangeRec}>\r\n                            <option value=\"Food\">Food</option>\r\n                            <option value=\"Hotel\">Hotel</option>\r\n                            <option value=\"Monuments\">Monuments</option>\r\n                            <option value=\"Restaurants\">Restaurants</option>\r\n                            <option value=\"Museums\">Museums</option>\r\n                            <option value=\"Parks\">Parks</option>\r\n                            <option value=\"Beaches\">Beaches</option>\r\n                            <option value=\"Nature\">Nature</option>\r\n                            <option value=\"Amusement Parks\">Amusement Parks</option>\r\n                            <option value=\"Zoo\">Zoo</option>\r\n                            <option value=\"Lake\">Lake</option>\r\n                            <option value=\"Casino\">Casino</option>\r\n                            <option value=\"Mountain\">Mountain</option>\r\n                         </Select>\r\n\r\n                           {/** Recommandation image add button */}\r\n                                                                        \r\n                                        <Input  \r\n                                        type=\"file\" \r\n                                        hidden\r\n                                        ref={el => hiddenInput = el}\r\n                                        id=\"fileInput\"\r\n                                        class=\"form-control-file\" \r\n                                        onChange={handleFileInputChange}\r\n                                        value={fileInputState}\r\n                                        />\r\n                                        {/** Recommandation image load button */}\r\n                                        \r\n                                         <Center>\r\n                                             <Button leftIcon={<AddIcon />} onClick={() => hiddenInput.click()} colorScheme=\"blue\" variant=\"outline\">\r\n                                                Add Image\r\n                                            </Button>\r\n                                         </Center>\r\n                                          {/** Preview of photo */}\r\n                                    {previewSource && (\r\n                                        <Center>\r\n                                        <Flex direction=\"column\">\r\n                                        \r\n                                             <Image\r\n                                        src={previewSource}\r\n                                        alt=\"chosen\"\r\n                                        boxSize=\"300px\"\r\n                                    />    \r\n                                   </Flex></Center>\r\n                                )}\r\n<br />\r\n                   <Center><Button type=\"submit\">Ask !</Button></Center>     \r\n                    \r\n                    </Box>\r\n                </Collapse>\r\n            </Center></form>\r\n\r\n             {/* Question list */}\r\n        \r\n        {questions !== null ? (\r\n            <Center>\r\n\r\n            \r\n        <Box minH=\"60vh\" mb=\"5\" w=\"800px\">\r\n          {filteredQuestions !== null\r\n            ? filteredQuestions.map(fque => (\r\n\r\n                  <Question que={fque} />\r\n                \r\n              ))\r\n            : questions.map(que => (\r\n                \r\n                  <Question que={que} />\r\n                \r\n              ))}\r\n        </Box>\r\n        </Center>\r\n      ):<p>loading...</p>}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Questions\r\n","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Question.js",[],"C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\Meetings.js",["174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194"],"import { Avatar, Badge, Box, Button, Center, Flex, Heading, Spacer, Text } from '@chakra-ui/react'\r\nimport React,{useContext,useEffect} from 'react'\r\nimport { MdClose, MdDone } from 'react-icons/md'\r\nimport AppContext from '../context/app/AppContext'\r\nimport AuthContext from '../context/auth/AuthContext'\r\nconst Meetings = () => {\r\n\r\n    const appContext = useContext(AppContext)\r\n    const {getUserMeetings,userMeetings,acceptMeeting,finishMeeting} = appContext\r\n\r\n    const authContext = useContext(AuthContext)\r\n    const {user} = authContext\r\n\r\n    useEffect(() => {\r\n        getUserMeetings()\r\n    }, [])\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n\r\n            {/** Pending Meetings */}\r\n\r\n\r\n            {userMeetings.length !== 0 &&\r\n            <>\r\n            <Box mb='4' textAlign=\"center\">\r\n               <Heading>Pending Meetings</Heading>\r\n            </Box>\r\n            \r\n            {userMeetings.map(meeting => \r\n                meeting.statut == \"pending\" &&\r\n                <Flex marginLeft=\"80\" marginBottom='5' alignItems=\"center\" maxW=\"4xl\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\" boxShadow=\"lg\">\r\n\r\n            <Box p=\"4\">\r\n            {meeting.hoster._id === user.id && \r\n         <Avatar\r\n      size=\"xl\"\r\n      name=\"Kola Tioluwani\"\r\n      src={meeting.requester.profile.profilePicture}\r\n    />  }  \r\n\r\n    {meeting.requester._id === user.id && \r\n    \r\n    <Avatar\r\n      size=\"xl\"\r\n      name=\"Kola Tioluwani\"\r\n      src={meeting.hoster.profile.profilePicture}\r\n    />}\r\n            </Box>\r\n      <Box p=\"6\">\r\n        \r\n        <Box\r\n         \r\n        >\r\n          Fullname : {meeting.requester._id === user.id ? meeting.hoster.profile.fullName : meeting.requester.profile.fullName}\r\n        </Box>\r\n        <Box\r\n            color=\"gray.500\"\r\n            fontWeight=\"semibold\"\r\n            letterSpacing=\"wide\"\r\n            fontSize=\"xs\"\r\n            textTransform=\"uppercase\"\r\n          >\r\n              {meeting.requester._id === user.id ? \r\n             <Text> Languages: {meeting.hoster.profile.languages.length !== 0 ? \r\n                meeting.hoster.profile.languages.map((language,i) => meeting.hoster.profile.languages.length == i + 1 ? language : language + '\\u2022') : 'Not Specified' }</Text> : \r\n                <Text> Languages: {meeting.requester.profile.languages.length !== 0 ? \r\n                    meeting.requester.profile.languages.map((language,i) => meeting.requester.profile.languages.length == i + 1 ? language : language + '\\u2022') : 'Not Specified' }</Text>\r\n            }\r\n         \r\n          </Box>\r\n\r\n      </Box>\r\n      <Flex direction=\"column\"\r\n      >\r\n          <Box>\r\n              Location :  {meeting.location}\r\n          </Box>\r\n          <Box>\r\n              Time :  {meeting.time}\r\n          </Box>\r\n       \r\n\r\n      </Flex>\r\n      <Box p=\"6\">\r\n        <Box d=\"flex\" alignItems=\"baseline\">\r\n         {meeting.requester._id == user.id ? \r\n         \r\n         <Badge colorScheme=\"green\" borderRadius=\"full\" px=\"2\" >\r\n            You are hosted\r\n          </Badge>\r\n         :  <Badge colorScheme=\"purple\" borderRadius=\"full\" px=\"2\" >\r\n            You Host\r\n        </Badge>} \r\n         \r\n        </Box>\r\n        </Box>\r\n\r\n        <Box>\r\n              Message :  {meeting.message}\r\n          </Box>\r\n\r\n\r\n      <Spacer />\r\n      {user.id == meeting.hoster._id ? \r\n      <Flex direction=\"column\" alignItems=\"center\" paddingRight=\"2\">\r\n      <Button onClick={() => acceptMeeting(meeting._id).then(_ => getUserMeetings()) } leftIcon={<MdDone/>} colorScheme=\"green\">Accept</Button>\r\n      </Flex> : \r\n      <Text pr='4'>Pending...</Text>\r\n    }\r\n      \r\n    </Flex>\r\n\r\n            )} \r\n            </>\r\n            }\r\n\r\n                  {userMeetings.filter(el => el.statut == \"pending\").length == 0 &&\r\n                    <Center><Text>No Pending meetings...</Text></Center>\r\n                  }\r\n\r\n\r\n            {/** Confirmed Meetings */}\r\n\r\n            {userMeetings.length !== 0 && \r\n            <>\r\n            <Box mb='4' textAlign=\"center\">\r\n            <Heading>Confirmed Meetings</Heading>\r\n          </Box>\r\n            {userMeetings.map(meeting => \r\n                meeting.statut == \"confirmed\" &&\r\n                <Flex marginLeft=\"80\" marginBottom='5' alignItems=\"center\" maxW=\"4xl\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\" boxShadow=\"lg\">\r\n\r\n            <Box p=\"4\">\r\n            {meeting.hoster._id === user.id && \r\n         <Avatar\r\n      size=\"xl\"\r\n      name=\"Kola Tioluwani\"\r\n      src={meeting.requester.profile.profilePicture}\r\n    />  }  \r\n\r\n    {meeting.requester._id === user.id && \r\n    \r\n    <Avatar\r\n      size=\"xl\"\r\n      name=\"Kola Tioluwani\"\r\n      src={meeting.hoster.profile.profilePicture}\r\n    />}\r\n    \r\n\r\n  \r\n            </Box>\r\n      <Box p=\"6\">\r\n        \r\n        <Box\r\n         \r\n        >\r\n          Fullname : {meeting.requester._id === user.id ? meeting.hoster.profile.fullName : meeting.requester.profile.fullName}\r\n        </Box>\r\n        <Box\r\n            color=\"gray.500\"\r\n            fontWeight=\"semibold\"\r\n            letterSpacing=\"wide\"\r\n            fontSize=\"xs\"\r\n            textTransform=\"uppercase\"\r\n          >\r\n         {meeting.requester._id === user.id ? \r\n             <Text> Languages: {meeting.hoster.profile.languages.length !== 0 ? \r\n                meeting.hoster.profile.languages.map((language,i) => meeting.hoster.profile.languages.length == i + 1 ? language : language + '\\u2022') : 'Not Specified' }</Text> : \r\n                <Text> Languages: {meeting.requester.profile.languages.length !== 0 ? \r\n                    meeting.requester.profile.languages.map((language,i) => meeting.requester.profile.languages.length == i + 1 ? language : language + '\\u2022') : 'Not Specified' }</Text>\r\n            }\r\n          </Box>\r\n\r\n      </Box>\r\n      <Flex direction=\"column\"\r\n      >\r\n          <Box>\r\n              Location :  {meeting.location}\r\n          </Box>\r\n          <Box>\r\n              Time :  {meeting.time}\r\n          </Box>\r\n       \r\n\r\n      </Flex>\r\n      <Box p=\"6\">\r\n        <Box d=\"flex\" alignItems=\"baseline\">\r\n         {meeting.requester._id == user.id ? \r\n         \r\n         <Badge colorScheme=\"green\" borderRadius=\"full\" px=\"2\" >\r\n            You are hosted\r\n          </Badge>\r\n         :  <Badge colorScheme=\"purple\" borderRadius=\"full\" px=\"2\" >\r\n            You Host\r\n        </Badge>} \r\n         \r\n        </Box>\r\n        </Box>\r\n      <Spacer />\r\n      \r\n      <Flex direction=\"row\" alignItems=\"center\" paddingRight=\"2\">\r\n      <Badge mr='2'>Meeting accepted</Badge>\r\n      <Button onClick={() => finishMeeting(meeting._id).then(_ => getUserMeetings()) } colorScheme=\"green\">Finish Meeting!</Button>\r\n      </Flex>\r\n    \r\n      \r\n    </Flex>\r\n\r\n            )} \r\n            </>\r\n            } \r\n\r\n          {userMeetings.filter(el => el.statut == \"confirmed\").length == 0 &&\r\n                              <Center><Text>No Confirmed meetings...</Text></Center>\r\n                            }\r\n\r\n\r\n            {/** Finished Meetings */}\r\n\r\n            {userMeetings.length !== 0 && \r\n            <>\r\n            <Box mb='4' textAlign=\"center\">\r\n            <Heading>Finished Meetings</Heading>\r\n          </Box>\r\n            {userMeetings.map(meeting => \r\n                meeting.statut == \"finished\" &&\r\n                <Flex marginLeft=\"80\" marginBottom='5' alignItems=\"center\" maxW=\"4xl\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\" boxShadow=\"lg\">\r\n\r\n            <Box p=\"4\">\r\n            {meeting.hoster._id === user.id && \r\n         <Avatar\r\n      size=\"xl\"\r\n      name=\"Kola Tioluwani\"\r\n      src={meeting.requester.profile.profilePicture}\r\n    />  }  \r\n\r\n    {meeting.requester._id === user.id && \r\n    \r\n    <Avatar\r\n      size=\"xl\"\r\n      name=\"Kola Tioluwani\"\r\n      src={meeting.hoster.profile.profilePicture}\r\n    />}\r\n            </Box>\r\n      <Box p=\"6\">\r\n        \r\n        <Box\r\n         \r\n        >\r\n          Fullname : {meeting.requester._id === user.id ? meeting.hoster.profile.fullName : meeting.requester.profile.fullName}\r\n        </Box>\r\n        <Box\r\n            color=\"gray.500\"\r\n            fontWeight=\"semibold\"\r\n            letterSpacing=\"wide\"\r\n            fontSize=\"xs\"\r\n            textTransform=\"uppercase\"\r\n          >\r\n         {meeting.requester._id === user.id ? \r\n             <Text> Languages: {meeting.hoster.profile.languages.length !== 0 ? \r\n                meeting.hoster.profile.languages.map((language,i) => meeting.hoster.profile.languages.length == i + 1 ? language : language + '\\u2022') : 'Not Specified' }</Text> : \r\n                <Text> Languages: {meeting.requester.profile.languages.length !== 0 ? \r\n                    meeting.requester.profile.languages.map((language,i) => meeting.requester.profile.languages.length == i + 1 ? language : language + '\\u2022') : 'Not Specified' }</Text>\r\n            }\r\n          </Box>\r\n\r\n      </Box>\r\n      <Flex direction=\"column\"\r\n      >\r\n          <Box>\r\n              Location :  {meeting.location}\r\n          </Box>\r\n          <Box>\r\n              Time :  {meeting.time}\r\n          </Box>\r\n       \r\n\r\n      </Flex>\r\n      <Box p=\"6\">\r\n        <Box d=\"flex\" alignItems=\"baseline\">\r\n         {meeting.requester._id == user.id ? \r\n         \r\n         <Badge colorScheme=\"green\" borderRadius=\"full\" px=\"2\" >\r\n            You are hosted\r\n          </Badge>\r\n         :  <Badge colorScheme=\"purple\" borderRadius=\"full\" px=\"2\" >\r\n            You Host\r\n        </Badge>} \r\n         \r\n        </Box>\r\n        </Box>\r\n      \r\n      <Flex direction=\"column\" alignItems=\"center\" paddingRight=\"2\">\r\n      <Badge colorScheme=\"red\">Meeting Finished</Badge>\r\n      </Flex>\r\n    \r\n      \r\n    </Flex>\r\n\r\n            )} \r\n            </>\r\n            } \r\n\r\n             {userMeetings.filter(el => el.statut == \"finished\").length == 0 &&\r\n                    <Center><Text>No Finished meetings...</Text></Center>\r\n                  }     \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Meetings\r\n","C:\\Users\\Oussama\\Desktop\\React Apps\\platine\\client\\src\\components\\HomePage.js",["195","196"],"import { Box, Button, Center, Flex, Heading, Image, Spacer, Text } from '@chakra-ui/react'\r\nimport React,{useEffect,useContext} from 'react'\r\nimport AppContext from '../context/app/AppContext'\r\n\r\nconst HomePage = props => {\r\n\r\nconst appContext = useContext(AppContext)\r\nconst {getAllCities,cities} = appContext\r\n\r\n    useEffect(() => {\r\n        getAllCities()\r\n    }, []);\r\n\r\n\r\n    return (\r\n<>\r\n        <Center mb='5'>\r\n        <Heading>Welcome to World Traveler!</Heading>\r\n\r\n        </Center>\r\n        \r\n        <Flex w=\"100%\" p=\"auto\" direction=\"row\">\r\n        <Flex\r\n          marginLeft=\"auto\"\r\n          marginRight=\"auto\"\r\n          w=\"70vw\"\r\n          justify=\"space-evenly\"\r\n          flexWrap=\"wrap\"\r\n          alignContent=\"space-evenly\"\r\n        >\r\n\r\n            {cities.length !== 0 && cities.map(city => (\r\n\r\n            <Box\r\n            m='5'\r\n            border=\"1px solid grey\"\r\n            borderRadius=\"10px\"\r\n            overflow=\"hidden\"\r\n            >\r\n                <Center>\r\n                     <Image\r\n            src={city.picture}\r\n            boxSize=\"200px\"\r\n            \r\n            objectFit=\"cover\"\r\n            display=\"block\"\r\n            />\r\n                </Center>\r\n           \r\n            <Box\r\n            as=\"h4\"\r\n            mb=\"auto\"\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n            color=\"grey\"\r\n            isTruncated\r\n            >\r\n                <Flex direction=\"column\" alignItems=\"center\">\r\n            <Text fontSize=\"3xl\">{city.title}</Text>\r\n            <Button onClick={() => {\r\n                props.history.push(`/community/${city.title}`)\r\n            }} m='2'>Show Locals</Button>\r\n            <Button onClick={() => {\r\n                props.history.push(`/recommandations/${city.title}`)\r\n            }} m='2'>See Recommandations</Button>\r\n                </Flex>\r\n                \r\n            </Box>\r\n            </Box>\r\n            ))}\r\n            \r\n\r\n    \r\n        </Flex>\r\n      </Flex>\r\n      </>\r\n        \r\n       \r\n    )\r\n}\r\n\r\nexport default HomePage\r\n",{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","severity":1,"message":"202","line":16,"column":40,"nodeType":"203","messageId":"204","endLine":16,"endColumn":44},{"ruleId":"205","severity":1,"message":"206","line":39,"column":36,"nodeType":"207","messageId":"208","endLine":39,"endColumn":38},{"ruleId":"209","severity":1,"message":"210","line":45,"column":8,"nodeType":"211","endLine":45,"endColumn":31,"suggestions":"212"},{"ruleId":"205","severity":1,"message":"206","line":45,"column":33,"nodeType":"207","messageId":"208","endLine":45,"endColumn":35},{"ruleId":"201","severity":1,"message":"213","line":81,"column":14,"nodeType":"203","messageId":"204","endLine":81,"endColumn":17},{"ruleId":"214","severity":1,"message":"215","line":11,"column":1,"nodeType":"216","endLine":65,"endColumn":2},{"ruleId":"201","severity":1,"message":"217","line":3,"column":49,"nodeType":"203","messageId":"204","endLine":3,"endColumn":59},{"ruleId":"201","severity":1,"message":"218","line":3,"column":76,"nodeType":"203","messageId":"204","endLine":3,"endColumn":86},{"ruleId":"201","severity":1,"message":"219","line":3,"column":87,"nodeType":"203","messageId":"204","endLine":3,"endColumn":92},{"ruleId":"201","severity":1,"message":"220","line":3,"column":93,"nodeType":"203","messageId":"204","endLine":3,"endColumn":98},{"ruleId":"201","severity":1,"message":"221","line":3,"column":99,"nodeType":"203","messageId":"204","endLine":3,"endColumn":105},{"ruleId":"201","severity":1,"message":"222","line":4,"column":24,"nodeType":"203","messageId":"204","endLine":4,"endColumn":45},{"ruleId":"201","severity":1,"message":"223","line":4,"column":46,"nodeType":"203","messageId":"204","endLine":4,"endColumn":54},{"ruleId":"209","severity":1,"message":"224","line":57,"column":8,"nodeType":"211","endLine":57,"endColumn":10,"suggestions":"225"},{"ruleId":"226","severity":1,"message":"227","line":62,"column":51,"nodeType":"228","messageId":"229","endLine":62,"endColumn":52,"suggestions":"230"},{"ruleId":"226","severity":1,"message":"231","line":62,"column":53,"nodeType":"228","messageId":"229","endLine":62,"endColumn":54,"suggestions":"232"},{"ruleId":"226","severity":1,"message":"227","line":62,"column":73,"nodeType":"228","messageId":"229","endLine":62,"endColumn":74,"suggestions":"233"},{"ruleId":"226","severity":1,"message":"231","line":62,"column":75,"nodeType":"228","messageId":"229","endLine":62,"endColumn":76,"suggestions":"234"},{"ruleId":"205","severity":1,"message":"206","line":178,"column":76,"nodeType":"207","messageId":"208","endLine":178,"endColumn":78},{"ruleId":"205","severity":1,"message":"206","line":248,"column":76,"nodeType":"207","messageId":"208","endLine":248,"endColumn":78},{"ruleId":"201","severity":1,"message":"235","line":3,"column":43,"nodeType":"203","messageId":"204","endLine":3,"endColumn":54},{"ruleId":"201","severity":1,"message":"217","line":3,"column":56,"nodeType":"203","messageId":"204","endLine":3,"endColumn":66},{"ruleId":"201","severity":1,"message":"236","line":3,"column":73,"nodeType":"203","messageId":"204","endLine":3,"endColumn":78},{"ruleId":"201","severity":1,"message":"237","line":3,"column":92,"nodeType":"203","messageId":"204","endLine":3,"endColumn":103},{"ruleId":"201","severity":1,"message":"238","line":4,"column":38,"nodeType":"203","messageId":"204","endLine":4,"endColumn":49},{"ruleId":"201","severity":1,"message":"239","line":4,"column":50,"nodeType":"203","messageId":"204","endLine":4,"endColumn":56},{"ruleId":"201","severity":1,"message":"240","line":4,"column":58,"nodeType":"203","messageId":"204","endLine":4,"endColumn":68},{"ruleId":"201","severity":1,"message":"241","line":4,"column":70,"nodeType":"203","messageId":"204","endLine":4,"endColumn":81},{"ruleId":"209","severity":1,"message":"242","line":31,"column":8,"nodeType":"211","endLine":31,"endColumn":10,"suggestions":"243"},{"ruleId":"209","severity":1,"message":"244","line":46,"column":8,"nodeType":"211","endLine":46,"endColumn":23,"suggestions":"245"},{"ruleId":"205","severity":1,"message":"206","line":209,"column":61,"nodeType":"207","messageId":"208","endLine":209,"endColumn":63},{"ruleId":"205","severity":1,"message":"206","line":259,"column":112,"nodeType":"207","messageId":"208","endLine":259,"endColumn":114},{"ruleId":"205","severity":1,"message":"206","line":287,"column":105,"nodeType":"207","messageId":"208","endLine":287,"endColumn":107},{"ruleId":"205","severity":1,"message":"206","line":292,"column":46,"nodeType":"207","messageId":"208","endLine":292,"endColumn":48},{"ruleId":"205","severity":1,"message":"206","line":348,"column":61,"nodeType":"207","messageId":"208","endLine":348,"endColumn":63},{"ruleId":"201","severity":1,"message":"246","line":1,"column":30,"nodeType":"203","messageId":"204","endLine":1,"endColumn":40},{"ruleId":"201","severity":1,"message":"247","line":19,"column":9,"nodeType":"203","messageId":"204","endLine":19,"endColumn":23},{"ruleId":"201","severity":1,"message":"248","line":20,"column":9,"nodeType":"203","messageId":"204","endLine":20,"endColumn":24},{"ruleId":"201","severity":1,"message":"249","line":21,"column":9,"nodeType":"203","messageId":"204","endLine":21,"endColumn":23},{"ruleId":"201","severity":1,"message":"247","line":15,"column":9,"nodeType":"203","messageId":"204","endLine":15,"endColumn":23},{"ruleId":"214","severity":1,"message":"215","line":18,"column":1,"nodeType":"216","endLine":140,"endColumn":2},{"ruleId":"250","severity":1,"message":"251","line":19,"column":5,"nodeType":"252","messageId":"253","endLine":136,"endColumn":6},{"ruleId":"201","severity":1,"message":"202","line":12,"column":12,"nodeType":"203","messageId":"204","endLine":12,"endColumn":16},{"ruleId":"209","severity":1,"message":"254","line":75,"column":8,"nodeType":"211","endLine":75,"endColumn":31,"suggestions":"255"},{"ruleId":"201","severity":1,"message":"256","line":3,"column":118,"nodeType":"203","messageId":"204","endLine":3,"endColumn":122},{"ruleId":"205","severity":1,"message":"257","line":20,"column":26,"nodeType":"207","messageId":"208","endLine":20,"endColumn":28},{"ruleId":"209","severity":1,"message":"258","line":23,"column":8,"nodeType":"211","endLine":23,"endColumn":23,"suggestions":"259"},{"ruleId":"209","severity":1,"message":"260","line":86,"column":8,"nodeType":"211","endLine":86,"endColumn":10,"suggestions":"261"},{"ruleId":"201","severity":1,"message":"256","line":3,"column":118,"nodeType":"203","messageId":"204","endLine":3,"endColumn":122},{"ruleId":"209","severity":1,"message":"262","line":17,"column":16,"nodeType":"211","endLine":17,"endColumn":18,"suggestions":"263"},{"ruleId":"205","severity":1,"message":"257","line":27,"column":26,"nodeType":"207","messageId":"208","endLine":27,"endColumn":28},{"ruleId":"209","severity":1,"message":"258","line":30,"column":8,"nodeType":"211","endLine":30,"endColumn":23,"suggestions":"264"},{"ruleId":"201","severity":1,"message":"265","line":3,"column":10,"nodeType":"203","messageId":"204","endLine":3,"endColumn":17},{"ruleId":"209","severity":1,"message":"266","line":16,"column":8,"nodeType":"211","endLine":16,"endColumn":10,"suggestions":"267"},{"ruleId":"205","severity":1,"message":"206","line":33,"column":32,"nodeType":"207","messageId":"208","endLine":33,"endColumn":34},{"ruleId":"205","severity":1,"message":"206","line":68,"column":110,"nodeType":"207","messageId":"208","endLine":68,"endColumn":112},{"ruleId":"205","severity":1,"message":"206","line":70,"column":120,"nodeType":"207","messageId":"208","endLine":70,"endColumn":122},{"ruleId":"205","severity":1,"message":"206","line":89,"column":33,"nodeType":"207","messageId":"208","endLine":89,"endColumn":35},{"ruleId":"205","severity":1,"message":"206","line":107,"column":16,"nodeType":"207","messageId":"208","endLine":107,"endColumn":18},{"ruleId":"205","severity":1,"message":"206","line":120,"column":56,"nodeType":"207","messageId":"208","endLine":120,"endColumn":58},{"ruleId":"205","severity":1,"message":"206","line":120,"column":77,"nodeType":"207","messageId":"208","endLine":120,"endColumn":79},{"ruleId":"205","severity":1,"message":"206","line":133,"column":32,"nodeType":"207","messageId":"208","endLine":133,"endColumn":34},{"ruleId":"205","severity":1,"message":"206","line":171,"column":110,"nodeType":"207","messageId":"208","endLine":171,"endColumn":112},{"ruleId":"205","severity":1,"message":"206","line":173,"column":120,"nodeType":"207","messageId":"208","endLine":173,"endColumn":122},{"ruleId":"205","severity":1,"message":"206","line":191,"column":33,"nodeType":"207","messageId":"208","endLine":191,"endColumn":35},{"ruleId":"205","severity":1,"message":"206","line":216,"column":48,"nodeType":"207","messageId":"208","endLine":216,"endColumn":50},{"ruleId":"205","severity":1,"message":"206","line":216,"column":71,"nodeType":"207","messageId":"208","endLine":216,"endColumn":73},{"ruleId":"205","severity":1,"message":"206","line":229,"column":32,"nodeType":"207","messageId":"208","endLine":229,"endColumn":34},{"ruleId":"205","severity":1,"message":"206","line":264,"column":110,"nodeType":"207","messageId":"208","endLine":264,"endColumn":112},{"ruleId":"205","severity":1,"message":"206","line":266,"column":120,"nodeType":"207","messageId":"208","endLine":266,"endColumn":122},{"ruleId":"205","severity":1,"message":"206","line":284,"column":33,"nodeType":"207","messageId":"208","endLine":284,"endColumn":35},{"ruleId":"205","severity":1,"message":"206","line":307,"column":51,"nodeType":"207","messageId":"208","endLine":307,"endColumn":53},{"ruleId":"205","severity":1,"message":"206","line":307,"column":73,"nodeType":"207","messageId":"208","endLine":307,"endColumn":75},{"ruleId":"201","severity":1,"message":"268","line":1,"column":53,"nodeType":"203","messageId":"204","endLine":1,"endColumn":59},{"ruleId":"209","severity":1,"message":"269","line":12,"column":8,"nodeType":"211","endLine":12,"endColumn":10,"suggestions":"270"},"no-native-reassign",["271"],"no-negated-in-lhs",["272"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.","ArrayExpression",["273"],"'res' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'IconButton' is defined but never used.","'RadioGroup' is defined but never used.","'Stack' is defined but never used.","'Radio' is defined but never used.","'Select' is defined but never used.","'MdPermContactCalendar' is defined but never used.","'MdSearch' is defined but never used.","React Hook useEffect has missing dependencies: 'filterProByLocation', 'getProfiles', and 'params.chosenCity'. Either include them or remove the dependency array.",["274"],"no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["275","276"],"Unnecessary escape character: \\-.",["277","278"],["279","280"],["281","282"],"'AvatarBadge' is defined but never used.","'Image' is defined but never used.","'ModalFooter' is defined but never used.","'MdPersonAdd' is defined but never used.","'MdChat' is defined but never used.","'MdFavorite' is defined but never used.","'MdGroupWork' is defined but never used.","React Hook useEffect has missing dependencies: 'getChosenProfile' and 'params.id'. Either include them or remove the dependency array.",["283"],"React Hook useEffect has missing dependencies: 'editedBirthday' and 'editedProfile'. Either include them or remove the dependency array. You can also do a functional update 'setEditedProfile(e => ...)' if you only need 'editedProfile' in the 'setEditedProfile' call.",["284"],"'useContext' is defined but never used.","'FILTER_PRO_GEN' is defined but never used.","'FILTER_PRO_LANG' is defined but never used.","'FILTER_PRO_AGE' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'getChosenProfile'. Either include it or remove the dependency array.",["285"],"'Text' is defined but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'rec'. Either include it or remove the dependency array. You can also do a functional update 'setRec(r => ...)' if you only need 'rec' in the 'setRec' call.",["286"],"React Hook useEffect has missing dependencies: 'filterRecByLocation', 'getAllRecommandations', and 'params.chosenCity'. Either include them or remove the dependency array.",["287"],"React Hook useEffect has a missing dependency: 'getAllQuestions'. Either include it or remove the dependency array.",["288"],["289"],"'MdClose' is defined but never used.","React Hook useEffect has a missing dependency: 'getUserMeetings'. Either include it or remove the dependency array.",["290"],"'Spacer' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllCities'. Either include it or remove the dependency array.",["291"],"no-global-assign","no-unsafe-negation",{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"messageId":"296","fix":"297","desc":"298"},{"messageId":"299","fix":"300","desc":"301"},{"messageId":"296","fix":"302","desc":"298"},{"messageId":"299","fix":"303","desc":"301"},{"messageId":"296","fix":"304","desc":"298"},{"messageId":"299","fix":"305","desc":"301"},{"messageId":"296","fix":"306","desc":"298"},{"messageId":"299","fix":"307","desc":"301"},{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},{"desc":"312","fix":"313"},{"desc":"314","fix":"315"},{"desc":"316","fix":"317"},{"desc":"318","fix":"319"},{"desc":"314","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},"Update the dependencies array to be: [error, isAuthenticated, props.history]",{"range":"325","text":"326"},"Update the dependencies array to be: [filterProByLocation, getProfiles, params.chosenCity]",{"range":"327","text":"328"},"removeEscape",{"range":"329","text":"330"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"331","text":"332"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"333","text":"330"},{"range":"334","text":"332"},{"range":"335","text":"330"},{"range":"336","text":"332"},{"range":"337","text":"330"},{"range":"338","text":"332"},"Update the dependencies array to be: [getChosenProfile, params.id]",{"range":"339","text":"340"},"Update the dependencies array to be: [chosenProfile, editedBirthday, editedProfile]",{"range":"341","text":"342"},"Update the dependencies array to be: [props.history, profile, getChosenProfile]",{"range":"343","text":"344"},"Update the dependencies array to be: [previewSource, rec]",{"range":"345","text":"346"},"Update the dependencies array to be: [filterRecByLocation, getAllRecommandations, params.chosenCity]",{"range":"347","text":"348"},"Update the dependencies array to be: [getAllQuestions]",{"range":"349","text":"350"},{"range":"351","text":"346"},"Update the dependencies array to be: [getUserMeetings]",{"range":"352","text":"353"},"Update the dependencies array to be: [getAllCities]",{"range":"354","text":"355"},[1012,1035],"[error, isAuthenticated, props.history]",[1875,1877],"[filterProByLocation, getProfiles, params.chosenCity]",[2030,2031],"",[2030,2030],"\\",[2032,2033],[2032,2032],[2052,2053],[2052,2052],[2054,2055],[2054,2054],[1347,1349],"[getChosenProfile, params.id]",[1821,1836],"[chosenProfile, editedBirthday, editedProfile]",[2387,2410],"[props.history, profile, getChosenProfile]",[825,840],"[previewSource, rec]",[2699,2701],"[filterRecByLocation, getAllRecommandations, params.chosenCity]",[720,722],"[getAllQuestions]",[1079,1094],[607,609],"[getUserMeetings]",[368,370],"[getAllCities]"]